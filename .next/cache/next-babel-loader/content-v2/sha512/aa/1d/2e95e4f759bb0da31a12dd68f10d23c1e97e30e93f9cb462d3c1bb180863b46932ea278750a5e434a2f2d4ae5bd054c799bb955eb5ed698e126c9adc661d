{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport queryString from 'query-string';\nimport authHelpers from \"../../services/helpers\";\nexport default class HttpClient {\n  constructor(baseURL) {\n    _defineProperty(this, \"instance\", void 0);\n\n    _defineProperty(this, \"requestInterceptor\", () => {\n      this.instance.interceptors.request.use(async config => {\n        const authBearer = authHelpers.getCrmAccessToken(); // is development mode\n        // if (process.env.NODE_ENV === 'development') {\n\n        config.headers.Authorization = `Bearer ${authBearer}`;\n        return config; // }\n      });\n    });\n\n    _defineProperty(this, \"responseInterceptor\", () => {\n      this.instance.interceptors.response.use(this._handleResponse, this.handleError);\n    });\n\n    _defineProperty(this, \"_handleResponse\", ({\n      data\n    }) => ({\n      data\n    }));\n\n    _defineProperty(this, \"handleError\", error => {\n      throw error;\n    });\n\n    this.instance = axios.create({\n      baseURL,\n      headers: {\n        'content-type': 'application/json'\n      },\n      paramsSerializer: params => queryString.stringify(params)\n    });\n    this.requestInterceptor();\n    this.responseInterceptor();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}