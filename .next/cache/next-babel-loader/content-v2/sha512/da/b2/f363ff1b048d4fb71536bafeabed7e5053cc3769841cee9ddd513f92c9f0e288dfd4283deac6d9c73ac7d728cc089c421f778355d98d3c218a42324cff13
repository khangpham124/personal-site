{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from \"axios\";\nimport HttpClient from \"../utils/axios/instance\";\nimport authHelpers from \"./helpers\";\nimport AuthInstance from \"./identity/auth\";\nimport { crmPlatform, authenticateURL, USERS_API_URL, CONFIRM_INVITE_USER } from \"./identity/index\";\nimport { catchAxiosError } from \"../utils/axios/error\";\nexport const codeStatus = {\n  SUCCESS: 200,\n  UNAUTHORIZED: 401\n};\nexport class authenticateAPI extends HttpClient {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"checkAuthenticate\", async payload => {\n      const response = await axios.post(`${authenticateURL}`, payload).catch(catchAxiosError);\n      return response;\n    });\n\n    _defineProperty(this, \"checkExistedEmail\", async email => {\n      const response = await axios.get(`${crmPlatform}/${USERS_API_URL}/is-email-existed/${email}`).catch(catchAxiosError);\n      return response;\n    });\n\n    _defineProperty(this, \"confirmInviteNewUser\", async (requestBody, token) => {\n      const response = await this.instance.post(`${crmPlatform}/${CONFIRM_INVITE_USER}?token=${token}`, requestBody).catch(catchAxiosError);\n      return response;\n    });\n  }\n\n}\n\nconst AuthorizedInstance = baseURL => {\n  const authBearer = authHelpers.getCrmAccessToken();\n  const instance = axios.create({\n    baseURL,\n    headers: {\n      Authorization: `Bearer ${authBearer}`\n    }\n  });\n\n  const refreshTokens = async () => {\n    const refreshToken = await authHelpers.getRefreshToken();\n\n    if (!refreshToken) {// navigate to login page\n    }\n\n    const {\n      access_token,\n      refresh_token\n    } = await AuthInstance.refreshToken(refreshToken !== null && refreshToken !== void 0 ? refreshToken : \"\");\n    authHelpers.storeAccessToken(access_token);\n    authHelpers.storeRefreshToken(refresh_token);\n    return authHelpers.getAccessToken();\n  };\n\n  const onRequest = request => {\n    const authBearer = authHelpers.getAccessToken();\n\n    if (authBearer) {\n      request.headers.Authorization = `Bearer ${authBearer}`;\n    }\n\n    return request;\n  };\n\n  const onResponseSuccess = response => response;\n\n  const onResponseError = async axiosError => {\n    const {\n      response\n    } = axiosError;\n    const responseStatus = response === null || response === void 0 ? void 0 : response.status;\n    const originalRequest = axiosError.config;\n\n    if (responseStatus === codeStatus.UNAUTHORIZED && originalRequest) {\n      return refreshTokens().then(newAccessToken => {\n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n        return axios.request(originalRequest);\n      }).catch(() => {// navigate to login page\n      });\n    }\n\n    return Promise.reject(axiosError);\n  };\n\n  instance.interceptors.request.use(onRequest);\n  instance.interceptors.response.use(onResponseSuccess, onResponseError);\n  return instance;\n};\n\nexport default AuthorizedInstance;","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/services/authorized-api.ts"],"names":["axios","HttpClient","authHelpers","AuthInstance","crmPlatform","authenticateURL","USERS_API_URL","CONFIRM_INVITE_USER","catchAxiosError","codeStatus","SUCCESS","UNAUTHORIZED","authenticateAPI","payload","response","post","catch","email","get","requestBody","token","instance","AuthorizedInstance","baseURL","authBearer","getCrmAccessToken","create","headers","Authorization","refreshTokens","refreshToken","getRefreshToken","access_token","refresh_token","storeAccessToken","storeRefreshToken","getAccessToken","onRequest","request","onResponseSuccess","onResponseError","axiosError","responseStatus","status","originalRequest","config","then","newAccessToken","Promise","reject","interceptors","use"],"mappings":"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","sourcesContent":["import axios, {\n  AxiosRequestConfig,\n  AxiosResponse,\n  AxiosError,\n  AxiosInstance,\n} from \"axios\";\nimport HttpClient from \"../utils/axios/instance\";\nimport { IResponse, IConfig } from \"../utils/axios/entities\";\nimport authHelpers from \"./helpers\";\nimport AuthInstance from \"./identity/auth\";\nimport { crmPlatform, authenticateURL, USERS_API_URL, CONFIRM_INVITE_USER } from \"./identity/index\";\n\nimport { catchAxiosError } from \"../utils/axios/error\";\n\nexport const codeStatus = {\n  SUCCESS: 200,\n  UNAUTHORIZED: 401,\n};\n\nexport class authenticateAPI extends HttpClient {\n  public checkAuthenticate = async (payload: any): Promise<IResponse> => {\n    const response: IResponse = await axios.post(`${authenticateURL}`, payload).catch(catchAxiosError);\n    return response;\n  };\n\n  public checkExistedEmail = async (email: string): Promise<IResponse> => {\n    const response: IResponse = await axios.get(`${crmPlatform}/${USERS_API_URL}/is-email-existed/${email}`).catch(catchAxiosError);\n    return response;\n  };\n\n  public confirmInviteNewUser = async (requestBody: any, token: string): Promise<IResponse> => {\n    const response: IResponse = await this.instance.post(`${crmPlatform}/${CONFIRM_INVITE_USER}?token=${token}`, requestBody).catch(catchAxiosError);\n    return response;\n  };\n}\n\n\n\nconst AuthorizedInstance = (baseURL: string): AxiosInstance => {\n  const authBearer = authHelpers.getCrmAccessToken();\n  const instance = axios.create({\n    baseURL,\n    headers: {\n      Authorization: `Bearer ${authBearer}`,\n    },\n  });\n\n  const refreshTokens = async () => {\n    const refreshToken = await authHelpers.getRefreshToken();\n\n    if (!refreshToken) {\n      // navigate to login page\n    }\n\n    const { access_token, refresh_token } = await AuthInstance.refreshToken(\n      refreshToken ?? \"\"\n    );\n\n    authHelpers.storeAccessToken(access_token);\n    authHelpers.storeRefreshToken(refresh_token);\n\n    return authHelpers.getAccessToken();\n  };\n\n  const onRequest = (request: AxiosRequestConfig) => {\n    const authBearer = authHelpers.getAccessToken();\n    if (authBearer) {\n      request.headers.Authorization = `Bearer ${authBearer}`;\n    }\n\n    return request;\n  };\n\n  const onResponseSuccess = (response: AxiosResponse) => response;\n\n  const onResponseError = async (axiosError: AxiosError) => {\n    const { response } = axiosError;\n    const responseStatus = response?.status;\n    const originalRequest = axiosError.config;\n\n    if (responseStatus === codeStatus.UNAUTHORIZED && originalRequest) {\n      return refreshTokens()\n        .then((newAccessToken) => {\n          originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n          return axios.request(originalRequest);\n        })\n        .catch(() => {\n          // navigate to login page\n        });\n    }\n\n    return Promise.reject(axiosError);\n  };\n\n  instance.interceptors.request.use(onRequest);\n  instance.interceptors.response.use(onResponseSuccess, onResponseError);\n\n  return instance;\n};\n\nexport default AuthorizedInstance;\n"]},"metadata":{},"sourceType":"module"}