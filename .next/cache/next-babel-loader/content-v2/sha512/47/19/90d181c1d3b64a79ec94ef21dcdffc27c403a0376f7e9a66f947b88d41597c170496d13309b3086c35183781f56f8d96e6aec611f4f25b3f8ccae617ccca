{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport HttpClient from '../../../utils/axios/instance';\nimport { catchAxiosError } from '../../../utils/axios/error';\nimport { COMPANY_API_URL } from '../index'; // import { TUsersResponse, ItemsUser } from './types';\n\nimport { crmPlatform } from \"src/services/identity\";\nexport class companyAPI extends HttpClient {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"getCompanies\", async (pageNumber, filters) => {\n      const filtering = filters && Object.keys(filters).length ? `filter=${JSON.stringify(filters)}&` : '';\n      const paging = pageNumber ? `pageIndex=${pageNumber}` : 'pageIndex=1';\n      const response = await this.instance.get(`${crmPlatform}/${COMPANY_API_URL}`).catch(catchAxiosError);\n      return response;\n    });\n\n    _defineProperty(this, \"getDetailCompany\", async IDCompany => {\n      const response = await this.instance.get(`${crmPlatform}/${COMPANY_API_URL}/${IDCompany}/employees?pageIndex=1&pageSize=200&sort={ \"createdAt\": \"DESC\" }`).catch(catchAxiosError);\n      return response;\n    });\n\n    _defineProperty(this, \"getDetailCompanyById\", async IDCompany => {\n      const response = await this.instance.get(`${crmPlatform}/${COMPANY_API_URL}/${IDCompany}`).catch(catchAxiosError);\n      return response;\n    });\n\n    _defineProperty(this, \"UpdateCompanyProfileById\", async (IDCompany, body) => {\n      const response = await this.instance.patch(`${crmPlatform}/${COMPANY_API_URL}/${IDCompany}`, body).catch(catchAxiosError);\n      return response;\n    });\n\n    _defineProperty(this, \"createCompany\", async body => {\n      const response = await this.instance.post(`${crmPlatform}/${COMPANY_API_URL}`, body).catch(catchAxiosError);\n      return response;\n    });\n\n    _defineProperty(this, \"deleteCompany\", async IDCompany => {\n      const response = await this.instance.delete(`${crmPlatform}/${COMPANY_API_URL}/${IDCompany}`).catch(catchAxiosError);\n      return response;\n    });\n  } // public getDetailCompany = async (IDCompany:string): Promise<IResponse> => {\n  //   const response: IResponse = await this.instance.get(`${baseUrl}/${COMPANY_API_URL}/${IDCompany}/employees`).catch(catchAxiosError);\n  //   return response;\n  // };\n\n\n}","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/services/identity/company/index.ts"],"names":["HttpClient","catchAxiosError","COMPANY_API_URL","crmPlatform","companyAPI","pageNumber","filters","filtering","Object","keys","length","JSON","stringify","paging","response","instance","get","catch","IDCompany","body","patch","post","delete"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,+BAAvB;AACA,SAASC,eAAT,QAAgC,4BAAhC;AAEA,SAEEC,eAFF,QAGO,UAHP,C,CAIA;;AACA,SAASC,WAAT,QAA4B,uBAA5B;AAGA,OAAO,MAAMC,UAAN,SAAyBJ,UAAzB,CAAoC;AAAA;AAAA;;AAAA,0CACnB,OAAOK,UAAP,EAA4BC,OAA5B,KAAkE;AACtF,YAAMC,SAAS,GAAGD,OAAO,IAAIE,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqBI,MAAhC,GAA0C,UAASC,IAAI,CAACC,SAAL,CAAeN,OAAf,CAAwB,GAA3E,GAAgF,EAAlG;AACA,YAAMO,MAAM,GAAGR,UAAU,GAAI,aAAYA,UAAW,EAA3B,GAA+B,aAAxD;AACA,YAAMS,QAAmB,GAAG,MAAM,KAAKC,QAAL,CAAcC,GAAd,CAAmB,GAAEb,WAAY,IAAGD,eAAgB,EAApD,EAAuDe,KAAvD,CAA6DhB,eAA7D,CAAlC;AACA,aAAOa,QAAP;AACD,KANwC;;AAAA,8CAOf,MAAOI,SAAP,IAAiD;AACzE,YAAMJ,QAAmB,GAAG,MAAM,KAAKC,QAAL,CAAcC,GAAd,CAAmB,GAAEb,WAAY,IAAGD,eAAgB,IAAGgB,SAAU,kEAAjE,EAAoID,KAApI,CAA0IhB,eAA1I,CAAlC;AACA,aAAOa,QAAP;AACD,KAVwC;;AAAA,kDAWX,MAAOI,SAAP,IAAiD;AAC7E,YAAMJ,QAAmB,GAAG,MAAM,KAAKC,QAAL,CAAcC,GAAd,CAAmB,GAAEb,WAAY,IAAGD,eAAgB,IAAGgB,SAAU,EAAjE,EAAoED,KAApE,CAA0EhB,eAA1E,CAAlC;AACA,aAAOa,QAAP;AACD,KAdwC;;AAAA,sDAeP,OAAOI,SAAP,EAA0BC,IAA1B,KAAkF;AAClH,YAAML,QAAmB,GAAG,MAAM,KAAKC,QAAL,CAAcK,KAAd,CAAqB,GAAEjB,WAAY,IAAGD,eAAgB,IAAGgB,SAAU,EAAnE,EAAsEC,IAAtE,EAA4EF,KAA5E,CAAkFhB,eAAlF,CAAlC;AACA,aAAOa,QAAP;AACD,KAlBwC;;AAAA,2CAoBlB,MAAOK,IAAP,IAA+D;AACpF,YAAML,QAAmB,GAAG,MAAM,KAAKC,QAAL,CAAcM,IAAd,CAAoB,GAAElB,WAAY,IAAGD,eAAgB,EAArD,EAAwDiB,IAAxD,EAA8DF,KAA9D,CAAoEhB,eAApE,CAAlC;AACA,aAAOa,QAAP;AACD,KAvBwC;;AAAA,2CAyBlB,MAAOI,SAAP,IAAiD;AACtE,YAAMJ,QAAmB,GAAG,MAAM,KAAKC,QAAL,CAAcO,MAAd,CAAsB,GAAEnB,WAAY,IAAGD,eAAgB,IAAGgB,SAAU,EAApE,EAAuED,KAAvE,CAA6EhB,eAA7E,CAAlC;AACA,aAAOa,QAAP;AACD,KA5BwC;AAAA,IA8BzC;AACA;AACA;AACA;;;AAjCyC","sourcesContent":["import HttpClient from '../../../utils/axios/instance';\nimport { catchAxiosError } from '../../../utils/axios/error';\nimport { IResponse, IConfig } from '../../../utils/axios/entities';\nimport {\n  baseUrl,\n  COMPANY_API_URL\n} from '../index';\n// import { TUsersResponse, ItemsUser } from './types';\nimport { crmPlatform } from \"src/services/identity\";\nimport { IFormUpdateCompanyProfile } from './types';\n\nexport class companyAPI extends HttpClient {\n  public getCompanies = async (pageNumber?: number, filters?: any): Promise<IResponse> => {\n    const filtering = filters && Object.keys(filters).length ? `filter=${JSON.stringify(filters)}&` : '';\n    const paging = pageNumber ? `pageIndex=${pageNumber}` : 'pageIndex=1';\n    const response: IResponse = await this.instance.get(`${crmPlatform}/${COMPANY_API_URL}`).catch(catchAxiosError);\n    return response;\n  };\n  public getDetailCompany = async (IDCompany: string): Promise<IResponse> => {\n    const response: IResponse = await this.instance.get(`${crmPlatform}/${COMPANY_API_URL}/${IDCompany}/employees?pageIndex=1&pageSize=200&sort={ \"createdAt\": \"DESC\" }`).catch(catchAxiosError);\n    return response;\n  };\n  public getDetailCompanyById = async (IDCompany: string): Promise<IResponse> => {\n    const response: IResponse = await this.instance.get(`${crmPlatform}/${COMPANY_API_URL}/${IDCompany}`).catch(catchAxiosError);\n    return response;\n  };\n  public UpdateCompanyProfileById = async (IDCompany: string, body: IFormUpdateCompanyProfile): Promise<IResponse> => {\n    const response: IResponse = await this.instance.patch(`${crmPlatform}/${COMPANY_API_URL}/${IDCompany}`, body).catch(catchAxiosError);\n    return response;\n  };\n\n  public createCompany = async (body: IFormUpdateCompanyProfile): Promise<IResponse> => {\n    const response: IResponse = await this.instance.post(`${crmPlatform}/${COMPANY_API_URL}`, body).catch(catchAxiosError);\n    return response;\n  };\n\n  public deleteCompany = async (IDCompany: string): Promise<IResponse> => {\n    const response: IResponse = await this.instance.delete(`${crmPlatform}/${COMPANY_API_URL}/${IDCompany}`).catch(catchAxiosError);\n    return response;\n  };\n\n  // public getDetailCompany = async (IDCompany:string): Promise<IResponse> => {\n  //   const response: IResponse = await this.instance.get(`${baseUrl}/${COMPANY_API_URL}/${IDCompany}/employees`).catch(catchAxiosError);\n  //   return response;\n  // };\n\n\n}"]},"metadata":{},"sourceType":"module"}