{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createReducer } from 'deox';\nimport { fetchProductAction, fetchProductsAction } from '../actions/products';\nconst initialState = {\n  data: undefined,\n  productById: undefined\n};\nconst leadsReducer = createReducer(initialState, handleAction => [handleAction(fetchProductsAction.success, (state, {\n  payload\n}) => _objectSpread(_objectSpread({}, state), {}, {\n  data: payload.products\n})), handleAction(fetchProductAction.success, (state, {\n  payload\n}) => _objectSpread(_objectSpread({}, state), {}, {\n  productById: payload.product\n}))]);\nexport default leadsReducer;","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/state-management/reducers/products.ts"],"names":["createReducer","fetchProductAction","fetchProductsAction","initialState","data","undefined","productById","leadsReducer","handleAction","success","state","payload","products","product"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAA8B,MAA9B;AAEA,SAASC,kBAAT,EAA6BC,mBAA7B,QAAwD,qBAAxD;AAQA,MAAMC,YAA4B,GAAG;AACnCC,EAAAA,IAAI,EAAEC,SAD6B;AAEnCC,EAAAA,WAAW,EAAED;AAFsB,CAArC;AAKA,MAAME,YAAY,GAAGP,aAAa,CAACG,YAAD,EAAgBK,YAAD,IAAkB,CACjEA,YAAY,CAACN,mBAAmB,CAACO,OAArB,EAA8B,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,qCACrCD,KADqC;AAExCN,EAAAA,IAAI,EAAEO,OAAO,CAACC;AAF0B,EAA9B,CADqD,EAKjEJ,YAAY,CAACP,kBAAkB,CAACQ,OAApB,EAA6B,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,qCACpCD,KADoC;AAEvCJ,EAAAA,WAAW,EAAEK,OAAO,CAACE;AAFkB,EAA7B,CALqD,CAAjC,CAAlC;AAWA,eAAeN,YAAf","sourcesContent":["import { createReducer } from 'deox';\n\nimport { fetchProductAction, fetchProductsAction } from '../actions/products';\nimport { TFetchProductsResponse, TFetchProductResponse } from 'services/identity/products/types';\n\ntype TProductsState = {\n  data?: TFetchProductsResponse;\n  productById?: TFetchProductResponse;\n};\n\nconst initialState: TProductsState = {\n  data: undefined,\n  productById: undefined,\n};\n\nconst leadsReducer = createReducer(initialState, (handleAction) => [\n  handleAction(fetchProductsAction.success, (state, { payload }) => ({\n    ...state,\n    data: payload.products,\n  })),\n  handleAction(fetchProductAction.success, (state, { payload }) => ({\n    ...state,\n    productById: payload.product,\n  })),\n]);\n\nexport default leadsReducer;\n"]},"metadata":{},"sourceType":"module"}