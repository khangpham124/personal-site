{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst getLoadingMatches = actionType => /(.*)_(REQUEST|SUCCESS|FAILED)/.exec(actionType);\n\nconst loadingReducer = (state = {}, action) => {\n  const matches = getLoadingMatches(action.type);\n\n  if (!matches) {\n    return state;\n  }\n\n  const [, requestName, requestStatus] = matches;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    [requestName]: requestStatus === 'REQUEST'\n  });\n};\n\nexport default loadingReducer;","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/state-management/reducers/status/loading.ts"],"names":["getLoadingMatches","actionType","exec","loadingReducer","state","action","matches","type","requestName","requestStatus"],"mappings":";;;;;;AAIA,MAAMA,iBAAiB,GAAIC,UAAD,IAAwB,gCAAgCC,IAAhC,CAAqCD,UAArC,CAAlD;;AAEA,MAAME,cAAc,GAAG,CAACC,KAAoB,GAAG,EAAxB,EAA4BC,MAA5B,KAA8D;AACnF,QAAMC,OAAO,GAAGN,iBAAiB,CAACK,MAAM,CAACE,IAAR,CAAjC;;AAEA,MAAI,CAACD,OAAL,EAAc;AACZ,WAAOF,KAAP;AACD;;AAED,QAAM,GAAGI,WAAH,EAAgBC,aAAhB,IAAiCH,OAAvC;AACA,yCACKF,KADL;AAEE,KAACI,WAAD,GAAeC,aAAa,KAAK;AAFnC;AAID,CAZD;;AAcA,eAAeN,cAAf","sourcesContent":["import { Action } from 'redux';\n\nexport type TLoadingState = { [id: string]: boolean };\n\nconst getLoadingMatches = (actionType: string) => /(.*)_(REQUEST|SUCCESS|FAILED)/.exec(actionType);\n\nconst loadingReducer = (state: TLoadingState = {}, action: Action): TLoadingState => {\n  const matches = getLoadingMatches(action.type);\n\n  if (!matches) {\n    return state;\n  }\n\n  const [, requestName, requestStatus] = matches;\n  return {\n    ...state,\n    [requestName]: requestStatus === 'REQUEST',\n  };\n};\n\nexport default loadingReducer;\n"]},"metadata":{},"sourceType":"module"}