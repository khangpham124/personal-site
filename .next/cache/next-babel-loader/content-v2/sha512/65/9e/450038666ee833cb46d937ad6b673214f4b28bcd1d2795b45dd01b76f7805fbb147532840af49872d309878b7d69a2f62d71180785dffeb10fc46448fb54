{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport HttpClient from '../../../utils/axios/instance';\nimport { crmPlatform } from \"src/services/identity\";\n\nclass Comments extends HttpClient {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"fetchCommentsById\", async (id, params) => {\n      const response = await this.instance.get(`${crmPlatform}/comments/leads/${id}`, {\n        params\n      });\n      return response.data;\n    });\n\n    _defineProperty(this, \"createComment\", async (leadId, body) => {\n      const response = await this.instance.post(`${crmPlatform}/comments/leads/${leadId}`, body);\n      return response.data;\n    });\n\n    _defineProperty(this, \"fetchCommentsByCustomerId\", async (customerId, pageIndex, pageSize) => {\n      const response = await this.instance.get(`${crmPlatform}/comments/customers/${customerId}?pageIndex=${pageIndex}&pageSize=${pageSize}`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"createCommentByCustomer\", async (customerId, content) => {\n      const response = await this.instance.post(`${crmPlatform}/comments/customers/${customerId}`, {\n        content\n      });\n      return response.data;\n    });\n  }\n\n}\n\nconst CommentsInstance = new Comments();\nexport default CommentsInstance;","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/services/identity/comments/index.ts"],"names":["HttpClient","crmPlatform","Comments","id","params","response","instance","get","data","leadId","body","post","customerId","pageIndex","pageSize","content","CommentsInstance"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,+BAAvB;AAMA,SAASC,WAAT,QAA4B,uBAA5B;;AAEA,MAAMC,QAAN,SAAuBF,UAAvB,CAAkC;AAAA;AAAA;;AAAA,+CACZ,OAClBG,EADkB,EAElBC,MAFkB,KAGsB;AACxC,YAAMC,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcC,GAAd,CAAmB,GAAEN,WAAY,mBAAkBE,EAAG,EAAtD,EAAyD;AAC9EC,QAAAA;AAD8E,OAAzD,CAAvB;AAGA,aAAOC,QAAQ,CAACG,IAAhB;AACD,KAT+B;;AAAA,2CAWhB,OACdC,MADc,EAEdC,IAFc,KAG0B;AACxC,YAAML,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcK,IAAd,CACpB,GAAEV,WAAY,mBAAkBQ,MAAO,EADnB,EAErBC,IAFqB,CAAvB;AAIA,aAAOL,QAAQ,CAACG,IAAhB;AACD,KApB+B;;AAAA,uDAsBJ,OAC1BI,UAD0B,EAE1BC,SAF0B,EAG1BC,QAH0B,KAIO;AACjC,YAAMT,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcC,GAAd,CACpB,GAAEN,WAAY,uBAAsBW,UAAW,cAAaC,SAAU,aAAYC,QAAS,EADvE,CAAvB;AAGA,aAAOT,QAAQ,CAACG,IAAhB;AACD,KA/B+B;;AAAA,qDAiCN,OACxBI,UADwB,EAExBG,OAFwB,KAGgB;AACxC,YAAMV,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcK,IAAd,CACpB,GAAEV,WAAY,uBAAsBW,UAAW,EAD3B,EAErB;AACEG,QAAAA;AADF,OAFqB,CAAvB;AAMA,aAAOV,QAAQ,CAACG,IAAhB;AACD,KA5C+B;AAAA;;AAAA;;AA+ClC,MAAMQ,gBAAgB,GAAG,IAAId,QAAJ,EAAzB;AACA,eAAec,gBAAf","sourcesContent":["import HttpClient from '../../../utils/axios/instance';\nimport {\n  TFetchCommentsByIdParams,\n  TFetchCommentsByIdResponse,\n  TAllCustomerComment,\n} from \"./types\";\nimport { crmPlatform } from \"src/services/identity\";\n\nclass Comments extends HttpClient {\n  fetchCommentsById = async (\n    id: string,\n    params: TFetchCommentsByIdParams\n  ): Promise<TFetchCommentsByIdResponse> => {\n    const response = await this.instance.get(`${crmPlatform}/comments/leads/${id}`, {\n      params,\n    });\n    return response.data;\n  };\n\n  createComment = async (\n    leadId: string,\n    body: { content: string }\n  ): Promise<TFetchCommentsByIdResponse> => {\n    const response = await this.instance.post(\n      `${crmPlatform}/comments/leads/${leadId}`,\n      body\n    );\n    return response.data;\n  };\n\n  fetchCommentsByCustomerId = async (\n    customerId: string,\n    pageIndex: number,\n    pageSize: number\n  ): Promise<TAllCustomerComment> => {\n    const response = await this.instance.get(\n      `${crmPlatform}/comments/customers/${customerId}?pageIndex=${pageIndex}&pageSize=${pageSize}`\n    );\n    return response.data;\n  };\n\n  createCommentByCustomer = async (\n    customerId: string,\n    content: string\n  ): Promise<TFetchCommentsByIdResponse> => {\n    const response = await this.instance.post(\n      `${crmPlatform}/comments/customers/${customerId}`,\n      {\n        content,\n      }\n    );\n    return response.data;\n  };\n}\n\nconst CommentsInstance = new Comments();\nexport default CommentsInstance;\n"]},"metadata":{},"sourceType":"module"}