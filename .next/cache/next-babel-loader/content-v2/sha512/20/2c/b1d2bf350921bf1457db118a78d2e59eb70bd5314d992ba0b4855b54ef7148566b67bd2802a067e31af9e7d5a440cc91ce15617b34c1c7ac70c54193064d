{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport HttpClient from '../../../utils/axios/instance';\nimport { crmPlatform } from \"src/services/identity\";\nimport { objectToQueryString } from 'utils/helper/objectToQueryString';\n\nclass Customers extends HttpClient {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"fetchCustomers\", async (pageIndex, pageSize, companyId, optionalParams) => {\n      const params = _objectSpread({\n        pageIndex,\n        pageSize,\n        companyId\n      }, optionalParams);\n\n      const response = await this.instance.get(`${crmPlatform}/customers?${objectToQueryString(params)}`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"fetchCustomer\", async id => {\n      const response = await this.instance.get(`${crmPlatform}/customers/${id}`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"fetchInterestingProductsByCustomerId\", async (customerId, pageIndex = 1, pageSize = 10) => {\n      const response = await this.instance.get(`${crmPlatform}/customers/${customerId}/interesting-products?pageIndex=${pageIndex}&pageSize=${pageSize}`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"addInterestingProductsByCustomerId\", async (customerId, productId) => {\n      const response = await this.instance.post(`${crmPlatform}/customers/${customerId}/interesting-products/${productId}`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"deleteInterestingProductsByCustomerId\", async (customerId, productId) => {\n      const response = await this.instance.delete(`${crmPlatform}/customers/${customerId}/interesting-products/${productId}`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"createCustomer\", async (body) => {\n      const response = await this.instance.post(`${crmPlatform}/customers`, body);\n      return response.data;\n    });\n\n    _defineProperty(this, \"updateCustomer\", async (id, body) => {\n      const response = await this.instance.patch(`${crmPlatform}/customers/${id}`, body);\n      return response.data;\n    });\n\n    _defineProperty(this, \"deleteCustomer\", async (IDCustomer) => {\n      const response = await this.instance.delete(`${crmPlatform}/customers/${IDCustomer}`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"exportCustomer\", async (IDCustomer) => {\n      const response = await this.instance.get(`${crmPlatform}/customers/${IDCustomer}/export`);\n      return response.data;\n    });\n  }\n\n}\n\nconst CustomersInstance = new Customers();\nexport default CustomersInstance;","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/services/identity/customers/index.ts"],"names":["HttpClient","crmPlatform","objectToQueryString","Customers","pageIndex","pageSize","companyId","optionalParams","params","response","instance","get","data","id","customerId","productId","post","delete","body","patch","IDCustomer","CustomersInstance"],"mappings":";;;;;;AACA,OAAOA,UAAP,MAAuB,+BAAvB;AASA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,mBAAT,QAAoC,kCAApC;;AAEA,MAAMC,SAAN,SAAwBH,UAAxB,CAAmC;AAAA;AAAA;;AAAA,4CAChB,OACfI,SADe,EAEfC,QAFe,EAGfC,SAHe,EAIfC,cAJe,KAKsB;AACrC,YAAMC,MAAM;AAAKJ,QAAAA,SAAL;AAAgBC,QAAAA,QAAhB;AAA0BC,QAAAA;AAA1B,SAAwCC,cAAxC,CAAZ;;AACA,YAAME,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcC,GAAd,CAAmB,GAAEV,WAAY,cAAaC,mBAAmB,CAACM,MAAD,CAAS,EAA1E,CAAvB;AACA,aAAOC,QAAQ,CAACG,IAAhB;AACD,KAVgC;;AAAA,2CAYjB,MAAOC,EAAP,IAAuD;AACrE,YAAMJ,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcC,GAAd,CAAmB,GAAEV,WAAY,cAAaY,EAAG,EAAjD,CAAvB;AACA,aAAOJ,QAAQ,CAACG,IAAhB;AACD,KAfgC;;AAAA,kEAiBM,OACrCE,UADqC,EAErCV,SAAiB,GAAG,CAFiB,EAGrCC,QAAgB,GAAG,EAHkB,KAIpB;AACjB,YAAMI,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcC,GAAd,CACpB,GAAEV,WAAY,cAAaa,UAAW,mCAAkCV,SAAU,aAAYC,QAAS,EADnF,CAAvB;AAGA,aAAOI,QAAQ,CAACG,IAAhB;AACD,KA1BgC;;AAAA,gEA4BI,OACnCE,UADmC,EAEnCC,SAFmC,KAGlB;AACjB,YAAMN,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcM,IAAd,CACpB,GAAEf,WAAY,cAAaa,UAAW,yBAAwBC,SAAU,EADpD,CAAvB;AAGA,aAAON,QAAQ,CAACG,IAAhB;AACD,KApCgC;;AAAA,mEAsCO,OACtCE,UADsC,EAEtCC,SAFsC,KAGrB;AACjB,YAAMN,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcO,MAAd,CACpB,GAAEhB,WAAY,cAAaa,UAAW,yBAAwBC,SAAU,EADpD,CAAvB;AAGA,aAAON,QAAQ,CAACG,IAAhB;AACD,KA9CgC;;AAAA,4CAgDhB,OACfM,IADe,KAEsB;AACrC,YAAMT,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcM,IAAd,CAAoB,GAAEf,WAAY,YAAlC,EAA+CiB,IAA/C,CAAvB;AACA,aAAOT,QAAQ,CAACG,IAAhB;AACD,KArDgC;;AAAA,4CAuDhB,OACfC,EADe,EAEfK,IAFe,KAGsB;AACrC,YAAMT,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcS,KAAd,CAAqB,GAAElB,WAAY,cAAaY,EAAG,EAAnD,EAAsDK,IAAtD,CAAvB;AACA,aAAOT,QAAQ,CAACG,IAAhB;AACD,KA7DgC;;AAAA,4CA+DhB,OACfQ,UADe,KAEsB;AACrC,YAAMX,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcO,MAAd,CAAsB,GAAEhB,WAAY,cAAamB,UAAW,EAA5D,CAAvB;AACA,aAAOX,QAAQ,CAACG,IAAhB;AACD,KApEgC;;AAAA,4CAsEhB,OACfQ,UADe,KAEsB;AACrC,YAAMX,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcC,GAAd,CACpB,GAAEV,WAAY,cAAamB,UAAW,SADlB,CAAvB;AAGA,aAAOX,QAAQ,CAACG,IAAhB;AACD,KA7EgC;AAAA;;AAAA;;AAgFnC,MAAMS,iBAAiB,GAAG,IAAIlB,SAAJ,EAA1B;AACA,eAAekB,iBAAf","sourcesContent":["\nimport HttpClient from '../../../utils/axios/instance';\nimport {\n  TCreateCustomerBody,\n  TCreateCustomerResponse,\n  TFetchCustomersResponse,\n  TFetchCustomerResponse,\n  TUpdateCustomerBody,\n  TUpdateCustomerResponse,\n} from \"./types\";\nimport { crmPlatform } from \"src/services/identity\";\nimport { objectToQueryString } from 'utils/helper/objectToQueryString';\n\nclass Customers extends HttpClient {\n  fetchCustomers = async (\n    pageIndex: number,\n    pageSize: number,\n    companyId: string,\n    optionalParams?: any\n  ): Promise<TFetchCustomersResponse> => {\n    const params = { pageIndex, pageSize, companyId, ...optionalParams };\n    const response = await this.instance.get(`${crmPlatform}/customers?${objectToQueryString(params)}`);\n    return response.data;\n  };\n\n  fetchCustomer = async (id: string): Promise<TFetchCustomerResponse> => {\n    const response = await this.instance.get(`${crmPlatform}/customers/${id}`);\n    return response.data;\n  };\n\n  fetchInterestingProductsByCustomerId = async (\n    customerId: string,\n    pageIndex: number = 1,\n    pageSize: number = 10\n  ): Promise<any> => {\n    const response = await this.instance.get(\n      `${crmPlatform}/customers/${customerId}/interesting-products?pageIndex=${pageIndex}&pageSize=${pageSize}`\n    );\n    return response.data;\n  };\n\n  addInterestingProductsByCustomerId = async (\n    customerId: string,\n    productId: string\n  ): Promise<any> => {\n    const response = await this.instance.post(\n      `${crmPlatform}/customers/${customerId}/interesting-products/${productId}`\n    );\n    return response.data;\n  };\n\n  deleteInterestingProductsByCustomerId = async (\n    customerId: string,\n    productId: string\n  ): Promise<any> => {\n    const response = await this.instance.delete(\n      `${crmPlatform}/customers/${customerId}/interesting-products/${productId}`\n    );\n    return response.data;\n  };\n\n  createCustomer = async (\n    body: TCreateCustomerBody\n  ): Promise<TCreateCustomerResponse> => {\n    const response = await this.instance.post(`${crmPlatform}/customers`, body);\n    return response.data;\n  };\n\n  updateCustomer = async (\n    id: string,\n    body: TUpdateCustomerBody\n  ): Promise<TUpdateCustomerResponse> => {\n    const response = await this.instance.patch(`${crmPlatform}/customers/${id}`, body);\n    return response.data;\n  };\n\n  deleteCustomer = async (\n    IDCustomer: string\n  ): Promise<TCreateCustomerResponse> => {\n    const response = await this.instance.delete(`${crmPlatform}/customers/${IDCustomer}`);\n    return response.data;\n  };\n\n  exportCustomer = async (\n    IDCustomer: any\n  ): Promise<TFetchCustomersResponse> => {\n    const response = await this.instance.get(\n      `${crmPlatform}/customers/${IDCustomer}/export`\n    );\n    return response.data;\n  };\n}\n\nconst CustomersInstance = new Customers();\nexport default CustomersInstance;\n"]},"metadata":{},"sourceType":"module"}