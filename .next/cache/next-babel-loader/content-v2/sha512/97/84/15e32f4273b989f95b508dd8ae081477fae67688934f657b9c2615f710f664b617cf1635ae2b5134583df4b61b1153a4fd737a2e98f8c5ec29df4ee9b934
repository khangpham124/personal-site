{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport HttpClient from '../../../utils/axios/instance';\nimport { crmPlatform } from \"src/services/identity\";\nimport Cookies from \"js-cookie\";\n\nclass Analytics extends HttpClient {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"fetchAnalytics\", async (fromDate, toDate, dimension, entity, question) => {\n      var _localStorage$getItem;\n\n      const params = {\n        fromDate,\n        toDate,\n        dimension,\n        entity,\n        question\n      };\n      const accountInfo = JSON.parse((_localStorage$getItem = localStorage.getItem(\"accounts\")) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : \"{}\");\n      const companyID = String(Cookies.get(\"companyID\"));\n      const response = await this.instance.get(`${crmPlatform}/analytics?companyId=${companyID}`, {\n        params\n      });\n      return response.data;\n    });\n  }\n\n}\n\nconst AnalyticsInstance = new Analytics();\nexport default AnalyticsInstance;","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/services/identity/analytics/index.ts"],"names":["HttpClient","crmPlatform","Cookies","Analytics","fromDate","toDate","dimension","entity","question","params","accountInfo","JSON","parse","localStorage","getItem","companyID","String","get","response","instance","data","AnalyticsInstance"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,+BAAvB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AAGA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,SAAN,SAAwBH,UAAxB,CAAmC;AAAA;AAAA;;AAAA,4CAChB,OAAOI,QAAP,EAAyBC,MAAzB,EAAyCC,SAAzC,EAAiFC,MAAjF,EAAmHC,QAAnH,KAA8L;AAAA;;AAC7M,YAAMC,MAAM,GAAG;AAAEL,QAAAA,QAAF;AAAYC,QAAAA,MAAZ;AAAoBC,QAAAA,SAApB;AAA+BC,QAAAA,MAA/B;AAAuCC,QAAAA;AAAvC,OAAf;AACA,YAAME,WAAW,GAAGC,IAAI,CAACC,KAAL,0BAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,yEAA+C,IAA/C,CAApB;AACA,YAAMC,SAAS,GAAGC,MAAM,CAACd,OAAO,CAACe,GAAR,CAAY,WAAZ,CAAD,CAAxB;AACA,YAAMC,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcF,GAAd,CAAmB,GAAEhB,WAAY,wBAAuBc,SAAU,EAAlE,EAAqE;AAAEN,QAAAA;AAAF,OAArE,CAAvB;AACA,aAAOS,QAAQ,CAACE,IAAhB;AACD,KAPgC;AAAA;;AAAA;;AAUnC,MAAMC,iBAAiB,GAAG,IAAIlB,SAAJ,EAA1B;AACA,eAAekB,iBAAf","sourcesContent":["import HttpClient from '../../../utils/axios/instance';\nimport { crmPlatform } from \"src/services/identity\";\n\nimport { TFetchAnalyticsResponse, inputAnalytics } from './types';\nimport Cookies from \"js-cookie\";\n\nclass Analytics extends HttpClient {\n  fetchAnalytics = async (fromDate: string, toDate: string, dimension: inputAnalytics[\"dimension\"], entity: inputAnalytics[\"entity\"], question: inputAnalytics[\"question\"]): Promise<TFetchAnalyticsResponse> => {\n    const params = { fromDate, toDate, dimension, entity, question };\n    const accountInfo = JSON.parse(localStorage.getItem(\"accounts\") ?? \"{}\");\n    const companyID = String(Cookies.get(\"companyID\"));\n    const response = await this.instance.get(`${crmPlatform}/analytics?companyId=${companyID}`, { params });\n    return response.data;\n  };\n}\n\nconst AnalyticsInstance = new Analytics();\nexport default AnalyticsInstance;\n"]},"metadata":{},"sourceType":"module"}