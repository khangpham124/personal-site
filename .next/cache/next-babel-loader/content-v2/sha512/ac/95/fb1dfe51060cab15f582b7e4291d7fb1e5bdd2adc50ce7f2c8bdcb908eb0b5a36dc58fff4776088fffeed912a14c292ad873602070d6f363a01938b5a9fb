{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from \"axios\";\nimport HttpClient from \"../utils/axios/instance\";\nimport authHelpers from \"./helpers\";\nimport AuthInstance from \"./identity/auth\";\nimport { crmPlatform, authenticateURL, USERS_API_URL, CONFIRM_INVITE_USER } from \"./identity/index\";\nimport { catchAxiosError } from \"../utils/axios/error\";\nexport const codeStatus = {\n  SUCCESS: 200,\n  UNAUTHORIZED: 401\n};\nexport class authenticateAPI extends HttpClient {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"checkAuthenticate\", async payload => {\n      const response = await axios.post(`${authenticateURL}`, payload).catch(catchAxiosError);\n      return response;\n    });\n\n    _defineProperty(this, \"checkExistedEmail\", async email => {\n      const response = await axios.get(`${crmPlatform}/${USERS_API_URL}/is-email-existed/${email}`).catch(catchAxiosError);\n      return response;\n    });\n\n    _defineProperty(this, \"confirmInviteNewUser\", async (requestBody, token) => {\n      const response = await this.instance.post(`${crmPlatform}/${CONFIRM_INVITE_USER}?token=${token}`, requestBody).catch(catchAxiosError);\n      return response;\n    });\n  }\n\n}\n\nconst AuthorizedInstance = baseURL => {\n  const authBearer = authHelpers.getCrmAccessToken();\n  const instance = axios.create({\n    baseURL,\n    headers: {\n      Authorization: `Bearer ${authBearer}`\n    }\n  });\n\n  const refreshTokens = async () => {\n    const refreshToken = await authHelpers.getRefreshToken();\n\n    if (!refreshToken) {// navigate to login page\n    }\n\n    const {\n      access_token,\n      refresh_token\n    } = await AuthInstance.refreshToken(refreshToken !== null && refreshToken !== void 0 ? refreshToken : \"\");\n    authHelpers.storeAccessToken(access_token);\n    authHelpers.storeRefreshToken(refresh_token);\n    return authHelpers.getAccessToken();\n  };\n\n  const onRequest = request => {\n    const authBearer = authHelpers.getAccessToken();\n\n    if (authBearer) {\n      request.headers.Authorization = `Bearer ${authBearer}`;\n    }\n\n    return request;\n  };\n\n  const onResponseSuccess = response => response;\n\n  const onResponseError = async axiosError => {\n    const {\n      response\n    } = axiosError;\n    const responseStatus = response === null || response === void 0 ? void 0 : response.status;\n    const originalRequest = axiosError.config;\n\n    if (responseStatus === codeStatus.UNAUTHORIZED && originalRequest) {\n      return refreshTokens().then(newAccessToken => {\n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n        return axios.request(originalRequest);\n      }).catch(() => {// navigate to login page\n      });\n    }\n\n    return Promise.reject(axiosError);\n  };\n\n  instance.interceptors.request.use(onRequest);\n  instance.interceptors.response.use(onResponseSuccess, onResponseError);\n  return instance;\n};\n\nexport default AuthorizedInstance;","map":null,"metadata":{},"sourceType":"module"}