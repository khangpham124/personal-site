{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport HttpClient from '../../../utils/axios/instance';\nimport { crmPlatform } from \"src/services/identity\";\nimport { objectToQueryString } from 'utils/helper/objectToQueryString';\nimport Cookies from \"js-cookie\";\n\nclass Leads extends HttpClient {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"fetchLeads\", async (pageIndex, pageSize, companyId, optionalParams) => {\n      const params = _objectSpread({\n        pageIndex,\n        pageSize,\n        companyId\n      }, optionalParams);\n\n      const response = await this.instance.get(`${crmPlatform}/leads?${objectToQueryString(params)}`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"fetchLead\", async id => {\n      const response = await this.instance.get(`${crmPlatform}/leads/${id} `);\n      return response.data;\n    });\n\n    _defineProperty(this, \"createLead\", async body => {\n      const response = await this.instance.post(`${crmPlatform}/leads`, body);\n      return response.data;\n    });\n\n    _defineProperty(this, \"updateLead\", async (id, body) => {\n      const response = await this.instance.patch(`${crmPlatform}/leads/${id}`, body);\n      return response.data;\n    });\n\n    _defineProperty(this, \"deleteLead\", async id => {\n      const response = await this.instance.delete(`${crmPlatform}/leads/${id}`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"convertToCustomer\", async (id) => {\n      const companyID = Cookies.get(\"companyID\");\n      const response = await this.instance.post(`${crmPlatform}/leads/${id}/convert-to-customer`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"postLeadAttachmentByID\", async (id, body) => {\n      const response = await this.instance.get(`${crmPlatform}/leads/attachment/${id}`, body);\n      return response.data;\n    });\n\n    _defineProperty(this, \"getListAttachmentByID\", async (id, body) => {\n      const response = await this.instance.get(`${crmPlatform}/leads/attachment/${id}`, body);\n      return response.data;\n    });\n  }\n\n}\n\nconst LeadsInstance = new Leads();\nexport default LeadsInstance;","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/services/identity/leads/index.ts"],"names":["HttpClient","crmPlatform","objectToQueryString","Cookies","Leads","pageIndex","pageSize","companyId","optionalParams","params","response","instance","get","data","id","body","post","patch","delete","companyID","LeadsInstance"],"mappings":";;;;;;AAAA,OAAOA,UAAP,MAAuB,+BAAvB;AAWA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,mBAAT,QAAoC,kCAApC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,KAAN,SAAoBJ,UAApB,CAA+B;AAAA;AAAA;;AAAA,wCAChB,OACXK,SADW,EAEXC,QAFW,EAGXC,SAHW,EAIXC,cAJW,KAKsB;AACjC,YAAMC,MAAM;AAAKJ,QAAAA,SAAL;AAAgBC,QAAAA,QAAhB;AAA0BC,QAAAA;AAA1B,SAAwCC,cAAxC,CAAZ;;AACA,YAAME,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcC,GAAd,CAAmB,GAAEX,WAAY,UAASC,mBAAmB,CAACO,MAAD,CAAS,EAAtE,CAAvB;AACA,aAAOC,QAAQ,CAACG,IAAhB;AACD,KAV4B;;AAAA,uCAYjB,MAAOC,EAAP,IAAmD;AAC7D,YAAMJ,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcC,GAAd,CAAmB,GAAEX,WAAY,UAASa,EAAG,GAA7C,CAAvB;AACA,aAAOJ,QAAQ,CAACG,IAAhB;AACD,KAf4B;;AAAA,wCAiBhB,MAAOE,IAAP,IAA+D;AAC1E,YAAML,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcK,IAAd,CAAoB,GAAEf,WAAY,QAAlC,EAA2Cc,IAA3C,CAAvB;AACA,aAAOL,QAAQ,CAACG,IAAhB;AACD,KApB4B;;AAAA,wCAsBhB,OACXC,EADW,EAEXC,IAFW,KAGsB;AACjC,YAAML,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcM,KAAd,CAAqB,GAAEhB,WAAY,UAASa,EAAG,EAA/C,EAAkDC,IAAlD,CAAvB;AACA,aAAOL,QAAQ,CAACG,IAAhB;AACD,KA5B4B;;AAAA,wCA8BhB,MAAOC,EAAP,IAAoD;AAC/D,YAAMJ,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcO,MAAd,CAAsB,GAAEjB,WAAY,UAASa,EAAG,EAAhD,CAAvB;AACA,aAAOJ,QAAQ,CAACG,IAAhB;AACD,KAjC4B;;AAAA,+CAmCT,OAClBC,EADkB,KAEsB;AACxC,YAAMK,SAAS,GAAGhB,OAAO,CAACS,GAAR,CAAY,WAAZ,CAAlB;AACA,YAAMF,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcK,IAAd,CACpB,GAAEf,WAAY,UAASa,EAAG,sBADN,CAAvB;AAGA,aAAOJ,QAAQ,CAACG,IAAhB;AACD,KA3C4B;;AAAA,oDA6CJ,OACvBC,EADuB,EAEvBC,IAFuB,KAGsB;AAC7C,YAAML,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcC,GAAd,CAAmB,GAAEX,WAAY,qBAAoBa,EAAG,EAAxD,EAA2DC,IAA3D,CAAvB;AACA,aAAOL,QAAQ,CAACG,IAAhB;AACD,KAnD4B;;AAAA,mDAqDL,OACtBC,EADsB,EAEtBC,IAFsB,KAGuB;AAC7C,YAAML,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcC,GAAd,CAAmB,GAAEX,WAAY,qBAAoBa,EAAG,EAAxD,EAA2DC,IAA3D,CAAvB;AACA,aAAOL,QAAQ,CAACG,IAAhB;AACD,KA3D4B;AAAA;;AAAA;;AA8D/B,MAAMO,aAAa,GAAG,IAAIhB,KAAJ,EAAtB;AACA,eAAegB,aAAf","sourcesContent":["import HttpClient from '../../../utils/axios/instance';\nimport {\n  TCreateLeadBody,\n  TCreateLeadResponse,\n  TFetchLeadsResponse,\n  TFetchLeadResponse,\n  TUpdateLeadBody,\n  TUpdateLeadResponse,\n  TConvertToCustomerResponse,\n  TPostLeadAttachmentByIDResponse,\n} from \"./types\";\nimport { crmPlatform } from \"src/services/identity\";\nimport { objectToQueryString } from 'utils/helper/objectToQueryString';\nimport Cookies from \"js-cookie\";\n\nclass Leads extends HttpClient {\n  fetchLeads = async (\n    pageIndex: number,\n    pageSize: number,\n    companyId: string,\n    optionalParams?: any\n  ): Promise<TFetchLeadsResponse> => {\n    const params = { pageIndex, pageSize, companyId, ...optionalParams };\n    const response = await this.instance.get(`${crmPlatform}/leads?${objectToQueryString(params)}`);\n    return response.data;\n  };\n\n  fetchLead = async (id: string): Promise<TFetchLeadResponse> => {\n    const response = await this.instance.get(`${crmPlatform}/leads/${id} `);\n    return response.data;\n  };\n\n  createLead = async (body: TCreateLeadBody): Promise<TCreateLeadResponse> => {\n    const response = await this.instance.post(`${crmPlatform}/leads`, body);\n    return response.data;\n  };\n\n  updateLead = async (\n    id: string,\n    body: TUpdateLeadBody\n  ): Promise<TUpdateLeadResponse> => {\n    const response = await this.instance.patch(`${crmPlatform}/leads/${id}`, body);\n    return response.data;\n  };\n\n  deleteLead = async (id: string): Promise<TUpdateLeadResponse> => {\n    const response = await this.instance.delete(`${crmPlatform}/leads/${id}`);\n    return response.data;\n  };\n\n  convertToCustomer = async (\n    id: string\n  ): Promise<TConvertToCustomerResponse> => {\n    const companyID = Cookies.get(\"companyID\");\n    const response = await this.instance.post(\n      `${crmPlatform}/leads/${id}/convert-to-customer`\n    );\n    return response.data;\n  };\n\n  postLeadAttachmentByID = async (\n    id: string,\n    body: any\n  ): Promise<TPostLeadAttachmentByIDResponse> => {\n    const response = await this.instance.get(`${crmPlatform}/leads/attachment/${id}`, body);\n    return response.data;\n  };\n\n  getListAttachmentByID = async (\n    id: string,\n    body: any\n  ): Promise<TPostLeadAttachmentByIDResponse> => {\n    const response = await this.instance.get(`${crmPlatform}/leads/attachment/${id}`, body);\n    return response.data;\n  };\n}\n\nconst LeadsInstance = new Leads();\nexport default LeadsInstance;\n"]},"metadata":{},"sourceType":"module"}