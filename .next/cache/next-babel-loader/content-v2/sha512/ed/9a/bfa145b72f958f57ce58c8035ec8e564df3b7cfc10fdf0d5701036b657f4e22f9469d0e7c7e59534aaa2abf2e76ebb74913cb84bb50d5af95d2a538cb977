{"ast":null,"code":"import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { createLogCallAction, fetchLogCallsAction } from \"../actions/log-calls\";\nimport LogCallsInstance from \"services/identity/log-calls\";\nexport function* fetchLogCallsSaga(action) {\n  try {\n    const {\n      type,\n      id,\n      pageIndex,\n      pageSize,\n      cb\n    } = action.payload;\n    const response = yield call(LogCallsInstance.fetchLogCalls, type, id, pageIndex, pageSize);\n    yield put(fetchLogCallsAction.success(response));\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(fetchLogCallsAction.failure(err));\n  }\n}\nexport function* createLogCallSaga(action) {\n  try {\n    const {\n      type,\n      id,\n      body,\n      cb\n    } = action.payload;\n    yield call(LogCallsInstance.createLogCall, type, id, body);\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(createLogCallAction.failure(err));\n  }\n}\nexport default function* root() {\n  yield all([takeLatest(fetchLogCallsAction.request.type, fetchLogCallsSaga), takeLatest(createLogCallAction.request.type, createLogCallSaga)]);\n}","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/state-management/sagas/log-calls.ts"],"names":["all","call","put","takeLatest","createLogCallAction","fetchLogCallsAction","LogCallsInstance","fetchLogCallsSaga","action","type","id","pageIndex","pageSize","cb","payload","response","fetchLogCalls","success","err","failure","createLogCallSaga","body","createLogCall","root","request"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AAGA,SACEC,mBADF,EAEEC,mBAFF,QAGO,sBAHP;AAIA,OAAOC,gBAAP,MAA6B,6BAA7B;AAKA,OAAO,UAAUC,iBAAV,CACLC,MADK,EAEM;AACX,MAAI;AACF,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,EAAR;AAAYC,MAAAA,SAAZ;AAAuBC,MAAAA,QAAvB;AAAiCC,MAAAA;AAAjC,QAAwCL,MAAM,CAACM,OAArD;AACA,UAAMC,QAAQ,GAAG,MAAMd,IAAI,CACzBK,gBAAgB,CAACU,aADQ,EAEzBP,IAFyB,EAGzBC,EAHyB,EAIzBC,SAJyB,EAKzBC,QALyB,CAA3B;AAOA,UAAMV,GAAG,CAACG,mBAAmB,CAACY,OAApB,CAA4BF,QAA5B,CAAD,CAAT;AACAF,IAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,YAAAA,EAAE;AACH,GAXD,CAWE,OAAOK,GAAP,EAAY;AACZ,UAAMhB,GAAG,CAACG,mBAAmB,CAACc,OAApB,CAA4BD,GAA5B,CAAD,CAAT;AACD;AACF;AAED,OAAO,UAAUE,iBAAV,CACLZ,MADK,EAEM;AACX,MAAI;AACF,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,EAAR;AAAYW,MAAAA,IAAZ;AAAkBR,MAAAA;AAAlB,QAAyBL,MAAM,CAACM,OAAtC;AACA,UAAMb,IAAI,CAACK,gBAAgB,CAACgB,aAAlB,EAAiCb,IAAjC,EAAuCC,EAAvC,EAA2CW,IAA3C,CAAV;AACAR,IAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,YAAAA,EAAE;AACH,GAJD,CAIE,OAAOK,GAAP,EAAY;AACZ,UAAMhB,GAAG,CAACE,mBAAmB,CAACe,OAApB,CAA4BD,GAA5B,CAAD,CAAT;AACD;AACF;AAED,eAAe,UAAUK,IAAV,GAA4B;AACzC,QAAMvB,GAAG,CAAC,CACRG,UAAU,CAACE,mBAAmB,CAACmB,OAApB,CAA4Bf,IAA7B,EAAmCF,iBAAnC,CADF,EAERJ,UAAU,CAACC,mBAAmB,CAACoB,OAApB,CAA4Bf,IAA7B,EAAmCW,iBAAnC,CAFF,CAAD,CAAT;AAID","sourcesContent":["import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { ActionType } from \"deox\";\n\nimport {\n  createLogCallAction,\n  fetchLogCallsAction,\n} from \"../actions/log-calls\";\nimport LogCallsInstance from \"services/identity/log-calls\";\nimport {\n  TFetchLogCallsResponse,\n} from \"services/identity/log-calls/types\";\n\nexport function* fetchLogCallsSaga(\n  action: ActionType<typeof fetchLogCallsAction.request>\n): Generator {\n  try {\n    const { type, id, pageIndex, pageSize, cb } = action.payload;\n    const response = yield call(\n      LogCallsInstance.fetchLogCalls,\n      type,\n      id,\n      pageIndex,\n      pageSize\n    );\n    yield put(fetchLogCallsAction.success(response as TFetchLogCallsResponse));\n    cb?.();\n  } catch (err) {\n    yield put(fetchLogCallsAction.failure(err));\n  }\n}\n\nexport function* createLogCallSaga(\n  action: ActionType<typeof createLogCallAction.request>\n): Generator {\n  try {\n    const { type, id, body, cb } = action.payload;\n    yield call(LogCallsInstance.createLogCall, type, id, body);\n    cb?.();\n  } catch (err) {\n    yield put(createLogCallAction.failure(err));\n  }\n}\n\nexport default function* root(): Generator {\n  yield all([\n    takeLatest(fetchLogCallsAction.request.type, fetchLogCallsSaga),\n    takeLatest(createLogCallAction.request.type, createLogCallSaga),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}