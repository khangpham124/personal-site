{"ast":null,"code":"import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { createCommentAction, fetchCommentsByIdAction } from \"../actions/comments\";\nimport CommentsInstance from \"services/identity/comments\";\nexport function* fetcCommentsByIdSaga(action) {\n  try {\n    const {\n      id,\n      params,\n      cb\n    } = action.payload;\n    const response = yield call(CommentsInstance.fetchCommentsById, id, params);\n    yield put(fetchCommentsByIdAction.success(response));\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(fetchCommentsByIdAction.failure(err));\n  }\n}\nexport function* createCommentSaga(action) {\n  try {\n    const {\n      leadId,\n      body,\n      cb\n    } = action.payload;\n    yield call(CommentsInstance.createComment, leadId, body);\n    yield put(createCommentAction.success());\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(createCommentAction.failure(err));\n  }\n}\nexport default function* root() {\n  yield all([takeLatest(fetchCommentsByIdAction.request.type, fetcCommentsByIdSaga), takeLatest(createCommentAction.request.type, createCommentSaga)]);\n}","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/state-management/sagas/comments.ts"],"names":["all","call","put","takeLatest","createCommentAction","fetchCommentsByIdAction","CommentsInstance","fetcCommentsByIdSaga","action","id","params","cb","payload","response","fetchCommentsById","success","err","failure","createCommentSaga","leadId","body","createComment","root","request","type"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AAGA,SAASC,mBAAT,EAA8BC,uBAA9B,QAA6D,qBAA7D;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AAGA,OAAO,UAAUC,oBAAV,CACLC,MADK,EAEM;AACX,MAAI;AACF,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA,MAAN;AAAcC,MAAAA;AAAd,QAAqBH,MAAM,CAACI,OAAlC;AACA,UAAMC,QAAQ,GAAG,MAAMZ,IAAI,CAACK,gBAAgB,CAACQ,iBAAlB,EAAqCL,EAArC,EAAyCC,MAAzC,CAA3B;AACA,UAAMR,GAAG,CAACG,uBAAuB,CAACU,OAAxB,CAAgCF,QAAhC,CAAD,CAAT;AACAF,IAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,YAAAA,EAAE;AACH,GALD,CAKE,OAAOK,GAAP,EAAY;AACZ,UAAMd,GAAG,CAACG,uBAAuB,CAACY,OAAxB,CAAgCD,GAAhC,CAAD,CAAT;AACD;AACF;AAED,OAAO,UAAUE,iBAAV,CACLV,MADK,EAEM;AACX,MAAI;AACF,UAAM;AAAEW,MAAAA,MAAF;AAAUC,MAAAA,IAAV;AAAgBT,MAAAA;AAAhB,QAAuBH,MAAM,CAACI,OAApC;AACA,UAAMX,IAAI,CAACK,gBAAgB,CAACe,aAAlB,EAAiCF,MAAjC,EAAyCC,IAAzC,CAAV;AACA,UAAMlB,GAAG,CAACE,mBAAmB,CAACW,OAApB,EAAD,CAAT;AACAJ,IAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,YAAAA,EAAE;AACH,GALD,CAKE,OAAOK,GAAP,EAAY;AACZ,UAAMd,GAAG,CAACE,mBAAmB,CAACa,OAApB,CAA4BD,GAA5B,CAAD,CAAT;AACD;AACF;AAED,eAAe,UAAUM,IAAV,GAA4B;AACzC,QAAMtB,GAAG,CAAC,CACRG,UAAU,CAACE,uBAAuB,CAACkB,OAAxB,CAAgCC,IAAjC,EAAuCjB,oBAAvC,CADF,EAERJ,UAAU,CAACC,mBAAmB,CAACmB,OAApB,CAA4BC,IAA7B,EAAmCN,iBAAnC,CAFF,CAAD,CAAT;AAID","sourcesContent":["import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { ActionType } from \"deox\";\n\nimport { createCommentAction, fetchCommentsByIdAction } from \"../actions/comments\";\nimport CommentsInstance from \"services/identity/comments\";\nimport { TFetchCommentsByIdResponse } from \"services/identity/comments/types\";\n\nexport function* fetcCommentsByIdSaga(\n  action: ActionType<typeof fetchCommentsByIdAction.request>\n): Generator {\n  try {\n    const { id, params, cb } = action.payload;\n    const response = yield call(CommentsInstance.fetchCommentsById, id, params);\n    yield put(fetchCommentsByIdAction.success(response as TFetchCommentsByIdResponse));\n    cb?.();\n  } catch (err) {\n    yield put(fetchCommentsByIdAction.failure(err));\n  }\n}\n\nexport function* createCommentSaga(\n  action: ActionType<typeof createCommentAction.request>\n): Generator {\n  try {\n    const { leadId, body, cb } = action.payload;\n    yield call(CommentsInstance.createComment, leadId, body);\n    yield put(createCommentAction.success());\n    cb?.();\n  } catch (err) {\n    yield put(createCommentAction.failure(err));\n  }\n}\n\nexport default function* root(): Generator {\n  yield all([\n    takeLatest(fetchCommentsByIdAction.request.type, fetcCommentsByIdSaga),\n    takeLatest(createCommentAction.request.type, createCommentSaga),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}