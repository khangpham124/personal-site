{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport HttpClient from '../../../utils/axios/instance';\nimport { crmPlatform } from \"src/services/identity\";\nimport Cookies from \"js-cookie\";\n\nclass Projects extends HttpClient {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"fetchProjects\", async (pageIndex, pageSize, companyId) => {\n      const companyID = Cookies.get(\"companyID\");\n      const response = await this.instance.get(`${crmPlatform}/crm-projects?pageIndex=${pageIndex}&pageSize=${pageSize}&companyId=${companyID}`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"fetchProjectDetail\", async (id) => {\n      const response = await this.instance.get(`${crmPlatform}/crm-projects/${id}`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"createProject\", async body => {\n      const response = await this.instance.post(`${crmPlatform}/crm-projects`, body);\n      return response.data;\n    });\n\n    _defineProperty(this, \"updateProject\", async (id, body) => {\n      const response = await this.instance.patch(`${crmPlatform}/crm-projects/${id}`, body);\n      return response.data;\n    });\n\n    _defineProperty(this, \"deleteProject\", async id => {\n      const response = await this.instance.delete(`${crmPlatform}/crm-projects/${id}`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"validateDomain\", async domainName => {\n      const response = await this.instance.get(`${crmPlatform}/crm-projects/is-project-domain-available/${domainName}`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"createProjectDesign\", async (id, body) => {\n      const response = await this.instance.post(`${crmPlatform}/crm-projects/${id}/design`, body);\n      return response.data;\n    });\n\n    _defineProperty(this, \"fetchProjectDesignDetail\", async (id) => {\n      const response = await this.instance.get(`${crmPlatform}/crm-projects/${id}/design`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"fetchProjectDesignByDomain\", async (domainName) => {\n      const response = await this.instance.get(`${crmPlatform}/crm-projects/design/${domainName}`);\n      return response.data;\n    });\n  }\n\n}\n\nconst ProjectsInstance = new Projects();\nexport default ProjectsInstance;","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/services/identity/projects/index.ts"],"names":["HttpClient","crmPlatform","Cookies","Projects","pageIndex","pageSize","companyId","companyID","get","response","instance","data","id","body","post","patch","delete","domainName","ProjectsInstance"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,+BAAvB;AAUA,SAASC,WAAT,QAA4B,uBAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,QAAN,SAAuBH,UAAvB,CAAkC;AAAA;AAAA;;AAAA,2CAChB,OACdI,SADc,EAEdC,QAFc,EAGdC,SAHc,KAIsB;AACpC,YAAMC,SAAS,GAAGL,OAAO,CAACM,GAAR,CAAY,WAAZ,CAAlB;AACA,YAAMC,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcF,GAAd,CACpB,GAAEP,WAAY,2BAA0BG,SAAU,aAAYC,QAAS,cAAaE,SAAU,EAD1E,CAAvB;AAGA,aAAOE,QAAQ,CAACE,IAAhB;AACD,KAX+B;;AAAA,gDAaX,OACnBC,EADmB,KAEsB;AACzC,YAAMH,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcF,GAAd,CAAmB,GAAEP,WAAY,iBAAgBW,EAAG,EAApD,CAAvB;AACA,aAAOH,QAAQ,CAACE,IAAhB;AACD,KAlB+B;;AAAA,2CAoBhB,MAAOE,IAAP,IAAsD;AACpE,YAAMJ,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcI,IAAd,CAAoB,GAAEb,WAAY,eAAlC,EAAkDY,IAAlD,CAAvB;AACA,aAAOJ,QAAQ,CAACE,IAAhB;AACD,KAvB+B;;AAAA,2CAyBhB,OACdC,EADc,EAEdC,IAFc,KAGO;AACrB,YAAMJ,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcK,KAAd,CAAqB,GAAEd,WAAY,iBAAgBW,EAAG,EAAtD,EAAyDC,IAAzD,CAAvB;AACA,aAAOJ,QAAQ,CAACE,IAAhB;AACD,KA/B+B;;AAAA,2CAiChB,MAAOC,EAAP,IAAwC;AACtD,YAAMH,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcM,MAAd,CAAsB,GAAEf,WAAY,iBAAgBW,EAAG,EAAvD,CAAvB;AACA,aAAOH,QAAQ,CAACE,IAAhB;AACD,KApC+B;;AAAA,4CAsCf,MAAOM,UAAP,IAAgD;AAC/D,YAAMR,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcF,GAAd,CACpB,GAAEP,WAAY,6CAA4CgB,UAAW,EADjD,CAAvB;AAGA,aAAOR,QAAQ,CAACE,IAAhB;AACD,KA3C+B;;AAAA,iDA6CV,OACpBC,EADoB,EAEpBC,IAFoB,KAGC;AACrB,YAAMJ,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcI,IAAd,CACpB,GAAEb,WAAY,iBAAgBW,EAAG,SADb,EAErBC,IAFqB,CAAvB;AAIA,aAAOJ,QAAQ,CAACE,IAAhB;AACD,KAtD+B;;AAAA,sDAwDL,OACzBC,EADyB,KAEsB;AAC/C,YAAMH,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcF,GAAd,CAAmB,GAAEP,WAAY,iBAAgBW,EAAG,SAApD,CAAvB;AACA,aAAOH,QAAQ,CAACE,IAAhB;AACD,KA7D+B;;AAAA,wDA+DH,OAC3BM,UAD2B,KAEsB;AACjD,YAAMR,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcF,GAAd,CACpB,GAAEP,WAAY,wBAAuBgB,UAAW,EAD5B,CAAvB;AAGA,aAAOR,QAAQ,CAACE,IAAhB;AACD,KAtE+B;AAAA;;AAAA;;AAyElC,MAAMO,gBAAgB,GAAG,IAAIf,QAAJ,EAAzB;AACA,eAAee,gBAAf","sourcesContent":["import HttpClient from '../../../utils/axios/instance';\nimport {\n  TFetchProjectsResponse,\n  TFetchProjectDetailResponse,\n  TCreateProjectBody,\n  TUpdateProjectBody,\n  TCreateProjectDesignBody,\n  TFetchProjectDesignDetailResponse,\n  TFetchProjectDesignByDomainResponse,\n} from \"./types\";\nimport { crmPlatform } from \"src/services/identity\";\nimport Cookies from \"js-cookie\";\n\nclass Projects extends HttpClient {\n  fetchProjects = async (\n    pageIndex: number,\n    pageSize: number,\n    companyId?: string\n  ): Promise<TFetchProjectsResponse> => {\n    const companyID = Cookies.get(\"companyID\");\n    const response = await this.instance.get(\n      `${crmPlatform}/crm-projects?pageIndex=${pageIndex}&pageSize=${pageSize}&companyId=${companyID}`\n    );\n    return response.data;\n  };\n\n  fetchProjectDetail = async (\n    id: string\n  ): Promise<TFetchProjectDetailResponse> => {\n    const response = await this.instance.get(`${crmPlatform}/crm-projects/${id}`);\n    return response.data;\n  };\n\n  createProject = async (body: TCreateProjectBody): Promise<unknown> => {\n    const response = await this.instance.post(`${crmPlatform}/crm-projects`, body);\n    return response.data;\n  };\n\n  updateProject = async (\n    id: string,\n    body: TUpdateProjectBody\n  ): Promise<unknown> => {\n    const response = await this.instance.patch(`${crmPlatform}/crm-projects/${id}`, body);\n    return response.data;\n  };\n\n  deleteProject = async (id: string): Promise<unknown> => {\n    const response = await this.instance.delete(`${crmPlatform}/crm-projects/${id}`);\n    return response.data;\n  };\n\n  validateDomain = async (domainName: string): Promise<unknown> => {\n    const response = await this.instance.get(\n      `${crmPlatform}/crm-projects/is-project-domain-available/${domainName}`\n    );\n    return response.data;\n  };\n\n  createProjectDesign = async (\n    id: string,\n    body: TCreateProjectDesignBody\n  ): Promise<unknown> => {\n    const response = await this.instance.post(\n      `${crmPlatform}/crm-projects/${id}/design`,\n      body\n    );\n    return response.data;\n  };\n\n  fetchProjectDesignDetail = async (\n    id: string\n  ): Promise<TFetchProjectDesignDetailResponse> => {\n    const response = await this.instance.get(`${crmPlatform}/crm-projects/${id}/design`);\n    return response.data;\n  };\n\n  fetchProjectDesignByDomain = async (\n    domainName: string\n  ): Promise<TFetchProjectDesignByDomainResponse> => {\n    const response = await this.instance.get(\n      `${crmPlatform}/crm-projects/design/${domainName}`\n    );\n    return response.data;\n  };\n}\n\nconst ProjectsInstance = new Projects();\nexport default ProjectsInstance;\n"]},"metadata":{},"sourceType":"module"}