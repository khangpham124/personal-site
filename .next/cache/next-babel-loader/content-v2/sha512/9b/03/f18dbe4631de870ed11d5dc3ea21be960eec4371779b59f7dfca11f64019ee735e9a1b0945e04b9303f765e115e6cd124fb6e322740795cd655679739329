{"ast":null,"code":"import { createActionCreator } from \"deox\";\nimport { EAnalyticsActions } from \"./constants\";\nexport const fetchAnalyticsLeadsAction = {\n  request: createActionCreator(EAnalyticsActions.FETCH_ANALYTICS_LEADS_REQUEST, resolve => (fromDate, toDate, dimension, entity = \"leads\", question, cb) => resolve({\n    fromDate,\n    toDate,\n    dimension,\n    entity,\n    question,\n    cb\n  })),\n  success: createActionCreator(EAnalyticsActions.FETCH_ANALYTICS_LEADS_SUCCESS, resolve => analytics => resolve({\n    analytics\n  })),\n  failure: createActionCreator(EAnalyticsActions.FETCH_ANALYTICS_LEADS_FAILED, resolve => error => resolve({\n    error\n  }))\n};\nexport const fetchAnalyticsLogcallsAction = {\n  request: createActionCreator(EAnalyticsActions.FETCH_ANALYTICS_LOGCALLS_REQUEST, resolve => (fromDate, toDate, dimension, entity = \"logcalls\", question, cb) => resolve({\n    fromDate,\n    toDate,\n    dimension,\n    entity,\n    question,\n    cb\n  })),\n  success: createActionCreator(EAnalyticsActions.FETCH_ANALYTICS_LOGCALLS_SUCCESS, resolve => analytics => resolve({\n    analytics\n  })),\n  failure: createActionCreator(EAnalyticsActions.FETCH_ANALYTICS_LOGCALLS_FAILED, resolve => error => resolve({\n    error\n  }))\n};\nexport const fetchAnalyticsCustomersAction = {\n  request: createActionCreator(EAnalyticsActions.FETCH_ANALYTICS_CUSTOMERS_REQUEST, resolve => (fromDate, toDate, dimension, entity = \"customers\", question, cb) => resolve({\n    fromDate,\n    toDate,\n    dimension,\n    entity,\n    question,\n    cb\n  })),\n  success: createActionCreator(EAnalyticsActions.FETCH_ANALYTICS_CUSTOMERS_SUCCESS, resolve => analytics => resolve({\n    analytics\n  })),\n  failure: createActionCreator(EAnalyticsActions.FETCH_ANALYTICS_CUSTOMERS_FAILED, resolve => error => resolve({\n    error\n  }))\n};\nexport const fetchAnalyticsTotalDurationAction = {\n  request: createActionCreator(EAnalyticsActions.FETCH_ANALYTICS_TOTAL_DURATION_REQUEST, resolve => (fromDate, toDate, dimension, entity = \"logcalls\", question, cb) => resolve({\n    fromDate,\n    toDate,\n    dimension,\n    entity,\n    question,\n    cb\n  })),\n  success: createActionCreator(EAnalyticsActions.FETCH_ANALYTICS_TOTAL_DURATION_SUCCESS, resolve => analytics => resolve({\n    analytics\n  })),\n  failure: createActionCreator(EAnalyticsActions.FETCH_ANALYTICS_TOTAL_DURATION_FAILED, resolve => error => resolve({\n    error\n  }))\n};\nexport const fetchAnalyticsConversionRateAction = {\n  request: createActionCreator(EAnalyticsActions.FETCH_ANALYTICS_CONVERSION_RATE_REQUEST, resolve => (fromDate, toDate, dimension, entity = \"leads\", question, cb) => resolve({\n    fromDate,\n    toDate,\n    dimension,\n    entity,\n    question,\n    cb\n  })),\n  success: createActionCreator(EAnalyticsActions.FETCH_ANALYTICS_CONVERSION_RATE_SUCCESS, resolve => analytics => resolve({\n    analytics\n  })),\n  failure: createActionCreator(EAnalyticsActions.FETCH_ANALYTICS_CONVERSION_RATE_FAILED, resolve => error => resolve({\n    error\n  }))\n};","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/state-management/actions/analytics/index.ts"],"names":["createActionCreator","EAnalyticsActions","fetchAnalyticsLeadsAction","request","FETCH_ANALYTICS_LEADS_REQUEST","resolve","fromDate","toDate","dimension","entity","question","cb","success","FETCH_ANALYTICS_LEADS_SUCCESS","analytics","failure","FETCH_ANALYTICS_LEADS_FAILED","error","fetchAnalyticsLogcallsAction","FETCH_ANALYTICS_LOGCALLS_REQUEST","FETCH_ANALYTICS_LOGCALLS_SUCCESS","FETCH_ANALYTICS_LOGCALLS_FAILED","fetchAnalyticsCustomersAction","FETCH_ANALYTICS_CUSTOMERS_REQUEST","FETCH_ANALYTICS_CUSTOMERS_SUCCESS","FETCH_ANALYTICS_CUSTOMERS_FAILED","fetchAnalyticsTotalDurationAction","FETCH_ANALYTICS_TOTAL_DURATION_REQUEST","FETCH_ANALYTICS_TOTAL_DURATION_SUCCESS","FETCH_ANALYTICS_TOTAL_DURATION_FAILED","fetchAnalyticsConversionRateAction","FETCH_ANALYTICS_CONVERSION_RATE_REQUEST","FETCH_ANALYTICS_CONVERSION_RATE_SUCCESS","FETCH_ANALYTICS_CONVERSION_RATE_FAILED"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,MAApC;AAEA,SAASC,iBAAT,QAAkC,aAAlC;AAOA,OAAO,MAAMC,yBAAyB,GAAG;AACvCC,EAAAA,OAAO,EAAEH,mBAAmB,CAC1BC,iBAAiB,CAACG,6BADQ,EAEzBC,OAAD,IACE,CACEC,QADF,EAEEC,MAFF,EAGEC,SAHF,EAIEC,MAAM,GAAG,OAJX,EAKEC,QALF,EAMEC,EANF,KAQEN,OAAO,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA,SAApB;AAA+BC,IAAAA,MAA/B;AAAuCC,IAAAA,QAAvC;AAAiDC,IAAAA;AAAjD,GAAD,CAXe,CADW;AAcvCC,EAAAA,OAAO,EAAEZ,mBAAmB,CAC1BC,iBAAiB,CAACY,6BADQ,EAEzBR,OAAD,IAAcS,SAAD,IAAmCT,OAAO,CAAC;AAAES,IAAAA;AAAF,GAAD,CAF7B,CAdW;AAkBvCC,EAAAA,OAAO,EAAEf,mBAAmB,CAC1BC,iBAAiB,CAACe,4BADQ,EAEzBX,OAAD,IAAcY,KAAD,IAAWZ,OAAO,CAAC;AAAEY,IAAAA;AAAF,GAAD,CAFL;AAlBW,CAAlC;AAwBP,OAAO,MAAMC,4BAA4B,GAAG;AAC1Cf,EAAAA,OAAO,EAAEH,mBAAmB,CAC1BC,iBAAiB,CAACkB,gCADQ,EAEzBd,OAAD,IACE,CACEC,QADF,EAEEC,MAFF,EAGEC,SAHF,EAIEC,MAAM,GAAG,UAJX,EAKEC,QALF,EAMEC,EANF,KAQEN,OAAO,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA,SAApB;AAA+BC,IAAAA,MAA/B;AAAuCC,IAAAA,QAAvC;AAAiDC,IAAAA;AAAjD,GAAD,CAXe,CADc;AAc1CC,EAAAA,OAAO,EAAEZ,mBAAmB,CAC1BC,iBAAiB,CAACmB,gCADQ,EAEzBf,OAAD,IAAcS,SAAD,IAAmCT,OAAO,CAAC;AAAES,IAAAA;AAAF,GAAD,CAF7B,CAdc;AAkB1CC,EAAAA,OAAO,EAAEf,mBAAmB,CAC1BC,iBAAiB,CAACoB,+BADQ,EAEzBhB,OAAD,IAAcY,KAAD,IAAWZ,OAAO,CAAC;AAAEY,IAAAA;AAAF,GAAD,CAFL;AAlBc,CAArC;AAwBP,OAAO,MAAMK,6BAA6B,GAAG;AAC3CnB,EAAAA,OAAO,EAAEH,mBAAmB,CAC1BC,iBAAiB,CAACsB,iCADQ,EAEzBlB,OAAD,IACE,CACEC,QADF,EAEEC,MAFF,EAGEC,SAHF,EAIEC,MAAM,GAAG,WAJX,EAKEC,QALF,EAMEC,EANF,KAQEN,OAAO,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA,SAApB;AAA+BC,IAAAA,MAA/B;AAAuCC,IAAAA,QAAvC;AAAiDC,IAAAA;AAAjD,GAAD,CAXe,CADe;AAc3CC,EAAAA,OAAO,EAAEZ,mBAAmB,CAC1BC,iBAAiB,CAACuB,iCADQ,EAEzBnB,OAAD,IAAcS,SAAD,IAAmCT,OAAO,CAAC;AAAES,IAAAA;AAAF,GAAD,CAF7B,CAde;AAkB3CC,EAAAA,OAAO,EAAEf,mBAAmB,CAC1BC,iBAAiB,CAACwB,gCADQ,EAEzBpB,OAAD,IAAcY,KAAD,IAAWZ,OAAO,CAAC;AAAEY,IAAAA;AAAF,GAAD,CAFL;AAlBe,CAAtC;AAwBP,OAAO,MAAMS,iCAAiC,GAAG;AAC/CvB,EAAAA,OAAO,EAAEH,mBAAmB,CAC1BC,iBAAiB,CAAC0B,sCADQ,EAEzBtB,OAAD,IACE,CACEC,QADF,EAEEC,MAFF,EAGEC,SAHF,EAIEC,MAAM,GAAG,UAJX,EAKEC,QALF,EAMEC,EANF,KAQEN,OAAO,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA,SAApB;AAA+BC,IAAAA,MAA/B;AAAuCC,IAAAA,QAAvC;AAAiDC,IAAAA;AAAjD,GAAD,CAXe,CADmB;AAc/CC,EAAAA,OAAO,EAAEZ,mBAAmB,CAC1BC,iBAAiB,CAAC2B,sCADQ,EAEzBvB,OAAD,IAAcS,SAAD,IAAmCT,OAAO,CAAC;AAAES,IAAAA;AAAF,GAAD,CAF7B,CAdmB;AAkB/CC,EAAAA,OAAO,EAAEf,mBAAmB,CAC1BC,iBAAiB,CAAC4B,qCADQ,EAEzBxB,OAAD,IAAcY,KAAD,IAAWZ,OAAO,CAAC;AAAEY,IAAAA;AAAF,GAAD,CAFL;AAlBmB,CAA1C;AAwBP,OAAO,MAAMa,kCAAkC,GAAG;AAChD3B,EAAAA,OAAO,EAAEH,mBAAmB,CAC1BC,iBAAiB,CAAC8B,uCADQ,EAEzB1B,OAAD,IACE,CACEC,QADF,EAEEC,MAFF,EAGEC,SAHF,EAIEC,MAAM,GAAG,OAJX,EAKEC,QALF,EAMEC,EANF,KAQEN,OAAO,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA,SAApB;AAA+BC,IAAAA,MAA/B;AAAuCC,IAAAA,QAAvC;AAAiDC,IAAAA;AAAjD,GAAD,CAXe,CADoB;AAchDC,EAAAA,OAAO,EAAEZ,mBAAmB,CAC1BC,iBAAiB,CAAC+B,uCADQ,EAEzB3B,OAAD,IAAcS,SAAD,IAAwCT,OAAO,CAAC;AAAES,IAAAA;AAAF,GAAD,CAFlC,CAdoB;AAkBhDC,EAAAA,OAAO,EAAEf,mBAAmB,CAC1BC,iBAAiB,CAACgC,sCADQ,EAEzB5B,OAAD,IAAcY,KAAD,IAAWZ,OAAO,CAAC;AAAEY,IAAAA;AAAF,GAAD,CAFL;AAlBoB,CAA3C","sourcesContent":["import { createActionCreator } from \"deox\";\n\nimport { EAnalyticsActions } from \"./constants\";\nimport {\n  TAnalyticsResponse,\n  inputAnalytics,\n  TConversionRateResponse,\n} from \"services/identity/analytics/types\";\n\nexport const fetchAnalyticsLeadsAction = {\n  request: createActionCreator(\n    EAnalyticsActions.FETCH_ANALYTICS_LEADS_REQUEST,\n    (resolve) =>\n      (\n        fromDate: string,\n        toDate: string,\n        dimension: inputAnalytics[\"dimension\"],\n        entity = \"leads\",\n        question: inputAnalytics[\"question\"],\n        cb?: () => void\n      ) =>\n        resolve({ fromDate, toDate, dimension, entity, question, cb })\n  ),\n  success: createActionCreator(\n    EAnalyticsActions.FETCH_ANALYTICS_LEADS_SUCCESS,\n    (resolve) => (analytics: TAnalyticsResponse) => resolve({ analytics })\n  ),\n  failure: createActionCreator(\n    EAnalyticsActions.FETCH_ANALYTICS_LEADS_FAILED,\n    (resolve) => (error) => resolve({ error })\n  ),\n};\n\nexport const fetchAnalyticsLogcallsAction = {\n  request: createActionCreator(\n    EAnalyticsActions.FETCH_ANALYTICS_LOGCALLS_REQUEST,\n    (resolve) =>\n      (\n        fromDate: string,\n        toDate: string,\n        dimension: inputAnalytics[\"dimension\"],\n        entity = \"logcalls\",\n        question: inputAnalytics[\"question\"],\n        cb?: () => void\n      ) =>\n        resolve({ fromDate, toDate, dimension, entity, question, cb })\n  ),\n  success: createActionCreator(\n    EAnalyticsActions.FETCH_ANALYTICS_LOGCALLS_SUCCESS,\n    (resolve) => (analytics: TAnalyticsResponse) => resolve({ analytics })\n  ),\n  failure: createActionCreator(\n    EAnalyticsActions.FETCH_ANALYTICS_LOGCALLS_FAILED,\n    (resolve) => (error) => resolve({ error })\n  ),\n};\n\nexport const fetchAnalyticsCustomersAction = {\n  request: createActionCreator(\n    EAnalyticsActions.FETCH_ANALYTICS_CUSTOMERS_REQUEST,\n    (resolve) =>\n      (\n        fromDate: string,\n        toDate: string,\n        dimension: inputAnalytics[\"dimension\"],\n        entity = \"customers\",\n        question: inputAnalytics[\"question\"],\n        cb?: () => void\n      ) =>\n        resolve({ fromDate, toDate, dimension, entity, question, cb })\n  ),\n  success: createActionCreator(\n    EAnalyticsActions.FETCH_ANALYTICS_CUSTOMERS_SUCCESS,\n    (resolve) => (analytics: TAnalyticsResponse) => resolve({ analytics })\n  ),\n  failure: createActionCreator(\n    EAnalyticsActions.FETCH_ANALYTICS_CUSTOMERS_FAILED,\n    (resolve) => (error) => resolve({ error })\n  ),\n};\n\nexport const fetchAnalyticsTotalDurationAction = {\n  request: createActionCreator(\n    EAnalyticsActions.FETCH_ANALYTICS_TOTAL_DURATION_REQUEST,\n    (resolve) =>\n      (\n        fromDate: string,\n        toDate: string,\n        dimension: inputAnalytics[\"dimension\"],\n        entity = \"logcalls\",\n        question: inputAnalytics[\"question\"],\n        cb?: () => void\n      ) =>\n        resolve({ fromDate, toDate, dimension, entity, question, cb })\n  ),\n  success: createActionCreator(\n    EAnalyticsActions.FETCH_ANALYTICS_TOTAL_DURATION_SUCCESS,\n    (resolve) => (analytics: TAnalyticsResponse) => resolve({ analytics })\n  ),\n  failure: createActionCreator(\n    EAnalyticsActions.FETCH_ANALYTICS_TOTAL_DURATION_FAILED,\n    (resolve) => (error) => resolve({ error })\n  ),\n};\n\nexport const fetchAnalyticsConversionRateAction = {\n  request: createActionCreator(\n    EAnalyticsActions.FETCH_ANALYTICS_CONVERSION_RATE_REQUEST,\n    (resolve) =>\n      (\n        fromDate: string,\n        toDate: string,\n        dimension: inputAnalytics[\"dimension\"],\n        entity = \"leads\",\n        question: inputAnalytics[\"question\"],\n        cb?: () => void\n      ) =>\n        resolve({ fromDate, toDate, dimension, entity, question, cb })\n  ),\n  success: createActionCreator(\n    EAnalyticsActions.FETCH_ANALYTICS_CONVERSION_RATE_SUCCESS,\n    (resolve) => (analytics: TConversionRateResponse) => resolve({ analytics })\n  ),\n  failure: createActionCreator(\n    EAnalyticsActions.FETCH_ANALYTICS_CONVERSION_RATE_FAILED,\n    (resolve) => (error) => resolve({ error })\n  ),\n};\n"]},"metadata":{},"sourceType":"module"}