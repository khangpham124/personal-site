{"ast":null,"code":"import _regeneratorRuntime from \"/Users/admin/Documents/personal-site/node_modules/next/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetcCommentsByIdSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(createCommentSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(root);\n\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { createCommentAction, fetchCommentsByIdAction } from \"../actions/comments\";\nimport CommentsInstance from \"services/identity/comments\";\nexport function fetcCommentsByIdSaga(action) {\n  var _action$payload, id, params, cb, response;\n\n  return _regeneratorRuntime.wrap(function fetcCommentsByIdSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _action$payload = action.payload, id = _action$payload.id, params = _action$payload.params, cb = _action$payload.cb;\n          _context.next = 4;\n          return call(CommentsInstance.fetchCommentsById, id, params);\n\n        case 4:\n          response = _context.sent;\n          _context.next = 7;\n          return put(fetchCommentsByIdAction.success(response));\n\n        case 7:\n          cb === null || cb === void 0 ? void 0 : cb();\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put(fetchCommentsByIdAction.failure(_context.t0));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\nexport function createCommentSaga(action) {\n  var _action$payload2, leadId, body, cb;\n\n  return _regeneratorRuntime.wrap(function createCommentSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _action$payload2 = action.payload, leadId = _action$payload2.leadId, body = _action$payload2.body, cb = _action$payload2.cb;\n          _context2.next = 4;\n          return call(CommentsInstance.createComment, leadId, body);\n\n        case 4:\n          _context2.next = 6;\n          return put(createCommentAction.success());\n\n        case 6:\n          cb === null || cb === void 0 ? void 0 : cb();\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 13;\n          return put(createCommentAction.failure(_context2.t0));\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\nexport default function root() {\n  return _regeneratorRuntime.wrap(function root$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeLatest(fetchCommentsByIdAction.request.type, fetcCommentsByIdSaga), takeLatest(createCommentAction.request.type, createCommentSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/state-management/sagas/comments.ts"],"names":["fetcCommentsByIdSaga","createCommentSaga","root","all","call","put","takeLatest","createCommentAction","fetchCommentsByIdAction","CommentsInstance","action","payload","id","params","cb","fetchCommentsById","response","success","failure","leadId","body","createComment","request","type"],"mappings":";;oDAOiBA,oB;qDAaAC,iB;qDAaQC,I;;AAjCzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AAGA,SAASC,mBAAT,EAA8BC,uBAA9B,QAA6D,qBAA7D;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AAGA,OAAO,SAAUT,oBAAV,CACLU,MADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAIwBA,MAAM,CAACC,OAJ/B,EAIKC,EAJL,mBAIKA,EAJL,EAISC,MAJT,mBAISA,MAJT,EAIiBC,EAJjB,mBAIiBA,EAJjB;AAAA;AAKc,iBAAMV,IAAI,CAACK,gBAAgB,CAACM,iBAAlB,EAAqCH,EAArC,EAAyCC,MAAzC,CAAV;;AALd;AAKGG,UAAAA,QALH;AAAA;AAMH,iBAAMX,GAAG,CAACG,uBAAuB,CAACS,OAAxB,CAAgCD,QAAhC,CAAD,CAAT;;AANG;AAOHF,UAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,YAAAA,EAAE;AAPC;AAAA;;AAAA;AAAA;AAAA;AAAA;AASH,iBAAMT,GAAG,CAACG,uBAAuB,CAACU,OAAxB,aAAD,CAAT;;AATG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaP,OAAO,SAAUjB,iBAAV,CACLS,MADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAI0BA,MAAM,CAACC,OAJjC,EAIKQ,MAJL,oBAIKA,MAJL,EAIaC,IAJb,oBAIaA,IAJb,EAImBN,EAJnB,oBAImBA,EAJnB;AAAA;AAKH,iBAAMV,IAAI,CAACK,gBAAgB,CAACY,aAAlB,EAAiCF,MAAjC,EAAyCC,IAAzC,CAAV;;AALG;AAAA;AAMH,iBAAMf,GAAG,CAACE,mBAAmB,CAACU,OAApB,EAAD,CAAT;;AANG;AAOHH,UAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,YAAAA,EAAE;AAPC;AAAA;;AAAA;AAAA;AAAA;AAAA;AASH,iBAAMT,GAAG,CAACE,mBAAmB,CAACW,OAApB,cAAD,CAAT;;AATG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaP,eAAe,SAAUhB,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRG,UAAU,CAACE,uBAAuB,CAACc,OAAxB,CAAgCC,IAAjC,EAAuCvB,oBAAvC,CADF,EAERM,UAAU,CAACC,mBAAmB,CAACe,OAApB,CAA4BC,IAA7B,EAAmCtB,iBAAnC,CAFF,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { ActionType } from \"deox\";\n\nimport { createCommentAction, fetchCommentsByIdAction } from \"../actions/comments\";\nimport CommentsInstance from \"services/identity/comments\";\nimport { TFetchCommentsByIdResponse } from \"services/identity/comments/types\";\n\nexport function* fetcCommentsByIdSaga(\n  action: ActionType<typeof fetchCommentsByIdAction.request>\n): Generator {\n  try {\n    const { id, params, cb } = action.payload;\n    const response = yield call(CommentsInstance.fetchCommentsById, id, params);\n    yield put(fetchCommentsByIdAction.success(response as TFetchCommentsByIdResponse));\n    cb?.();\n  } catch (err) {\n    yield put(fetchCommentsByIdAction.failure(err));\n  }\n}\n\nexport function* createCommentSaga(\n  action: ActionType<typeof createCommentAction.request>\n): Generator {\n  try {\n    const { leadId, body, cb } = action.payload;\n    yield call(CommentsInstance.createComment, leadId, body);\n    yield put(createCommentAction.success());\n    cb?.();\n  } catch (err) {\n    yield put(createCommentAction.failure(err));\n  }\n}\n\nexport default function* root(): Generator {\n  yield all([\n    takeLatest(fetchCommentsByIdAction.request.type, fetcCommentsByIdSaga),\n    takeLatest(createCommentAction.request.type, createCommentSaga),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}