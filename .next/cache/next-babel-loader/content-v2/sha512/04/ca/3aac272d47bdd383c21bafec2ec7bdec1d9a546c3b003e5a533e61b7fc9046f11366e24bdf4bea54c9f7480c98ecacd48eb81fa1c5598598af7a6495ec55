{"ast":null,"code":"import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { createCustomerAction, fetchCustomerAction, fetchCustomersAction, updateCustomerAction } from \"../actions/customers\";\nimport CustomersInstance from \"services/identity/customers\";\nexport function* fetchCustomersSaga(action) {\n  try {\n    const {\n      pageIndex,\n      pageSize,\n      optionalParams,\n      cb\n    } = action.payload;\n    const response = yield call(CustomersInstance.fetchCustomers, pageIndex, pageSize, optionalParams);\n    yield put(fetchCustomersAction.success(response));\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(fetchCustomersAction.failure(err));\n  }\n}\nexport function* fetchCustomerSaga(action) {\n  try {\n    const {\n      id,\n      cb\n    } = action.payload;\n    const response = yield call(CustomersInstance.fetchCustomer, id);\n    yield put(fetchCustomerAction.success(response));\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(fetchCustomerAction.failure(err));\n  }\n}\nexport function* createCustomerSaga(action) {\n  try {\n    const {\n      body,\n      cb\n    } = action.payload;\n    const response = yield call(CustomersInstance.createCustomer, body);\n    yield put(createCustomerAction.success(response));\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(createCustomerAction.failure(err));\n  }\n}\nexport function* updateCustomerSaga(action) {\n  try {\n    const {\n      id,\n      body,\n      cb\n    } = action.payload;\n    yield call(CustomersInstance.updateCustomer, id, body);\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(updateCustomerAction.failure(err));\n  }\n}\nexport default function* root() {\n  yield all([takeLatest(fetchCustomersAction.request.type, fetchCustomersSaga), takeLatest(fetchCustomerAction.request.type, fetchCustomerSaga), takeLatest(createCustomerAction.request.type, createCustomerSaga), takeLatest(updateCustomerAction.request.type, updateCustomerSaga)]);\n}","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/state-management/sagas/customers.ts"],"names":["all","call","put","takeLatest","createCustomerAction","fetchCustomerAction","fetchCustomersAction","updateCustomerAction","CustomersInstance","fetchCustomersSaga","action","pageIndex","pageSize","optionalParams","cb","payload","response","fetchCustomers","success","err","failure","fetchCustomerSaga","id","fetchCustomer","createCustomerSaga","body","createCustomer","updateCustomerSaga","updateCustomer","root","request","type"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { ActionType } from \"deox\";\n\nimport {\n  createCustomerAction,\n  fetchCustomerAction,\n  fetchCustomersAction,\n  updateCustomerAction,\n} from \"../actions/customers\";\nimport CustomersInstance from \"services/identity/customers\";\nimport {\n  TCreateCustomerResponse,\n  TFetchCustomerResponse,\n  TFetchCustomersResponse,\n  TUpdateCustomerResponse,\n} from \"services/identity/customers/types\";\n\nexport function* fetchCustomersSaga(\n  action: ActionType<typeof fetchCustomersAction.request>\n): Generator {\n  try {\n    const { pageIndex, pageSize, optionalParams, cb } = action.payload;\n    const response = yield call(\n      CustomersInstance.fetchCustomers,\n      pageIndex,\n      pageSize,\n      optionalParams\n    );\n    yield put(\n      fetchCustomersAction.success(response as TFetchCustomersResponse)\n    );\n    cb?.();\n  } catch (err) {\n    yield put(fetchCustomersAction.failure(err));\n  }\n}\n\nexport function* fetchCustomerSaga(\n  action: ActionType<typeof fetchCustomerAction.request>\n): Generator {\n  try {\n    const { id, cb } = action.payload;\n    const response = yield call(CustomersInstance.fetchCustomer, id);\n    yield put(fetchCustomerAction.success(response as TFetchCustomerResponse));\n    cb?.();\n  } catch (err) {\n    yield put(fetchCustomerAction.failure(err));\n  }\n}\n\nexport function* createCustomerSaga(\n  action: ActionType<typeof createCustomerAction.request>\n): Generator {\n  try {\n    const { body, cb } = action.payload;\n    const response = yield call(CustomersInstance.createCustomer, body);\n    yield put(\n      createCustomerAction.success(response as TCreateCustomerResponse)\n    );\n    cb?.();\n  } catch (err) {\n    yield put(createCustomerAction.failure(err));\n  }\n}\n\nexport function* updateCustomerSaga(\n  action: ActionType<typeof updateCustomerAction.request>\n): Generator {\n  try {\n    const { id, body, cb } = action.payload;\n    yield call(CustomersInstance.updateCustomer, id, body);\n    cb?.();\n  } catch (err) {\n    yield put(updateCustomerAction.failure(err));\n  }\n}\n\nexport default function* root(): Generator {\n  yield all([\n    takeLatest(fetchCustomersAction.request.type, fetchCustomersSaga),\n    takeLatest(fetchCustomerAction.request.type, fetchCustomerSaga),\n    takeLatest(createCustomerAction.request.type, createCustomerSaga),\n    takeLatest(updateCustomerAction.request.type, updateCustomerSaga),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}