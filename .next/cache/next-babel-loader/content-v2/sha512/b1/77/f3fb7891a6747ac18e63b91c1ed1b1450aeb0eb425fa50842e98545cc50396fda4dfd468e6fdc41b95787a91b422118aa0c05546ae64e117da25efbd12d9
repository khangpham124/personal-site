{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createReducer } from \"deox\";\nimport { fetchLogCallsAction } from \"../actions/log-calls\";\nconst initialState = {\n  all: undefined\n};\nconst logCallsReducer = createReducer(initialState, handleAction => [handleAction(fetchLogCallsAction.success, (state, {\n  payload\n}) => _objectSpread(_objectSpread({}, state), {}, {\n  all: payload.logCalls\n}))]);\nexport default logCallsReducer;","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/state-management/reducers/log-calls.ts"],"names":["createReducer","fetchLogCallsAction","initialState","all","undefined","logCallsReducer","handleAction","success","state","payload","logCalls"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAA8B,MAA9B;AAEA,SACEC,mBADF,QAEO,sBAFP;AAWA,MAAMC,YAA4B,GAAG;AACnCC,EAAAA,GAAG,EAAEC;AAD8B,CAArC;AAIA,MAAMC,eAAe,GAAGL,aAAa,CAACE,YAAD,EAAgBI,YAAD,IAAkB,CACpEA,YAAY,CAACL,mBAAmB,CAACM,OAArB,EAA8B,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,qCACrCD,KADqC;AAExCL,EAAAA,GAAG,EAAEM,OAAO,CAACC;AAF2B,EAA9B,CADwD,CAAjC,CAArC;AAOA,eAAeL,eAAf","sourcesContent":["import { createReducer } from \"deox\";\n\nimport {\n  fetchLogCallsAction,\n} from \"../actions/log-calls\";\nimport {\n  TFetchLogCallsResponse,\n} from \"services/identity/log-calls/types\";\n\ntype TLogCallsState = {\n  all?: TFetchLogCallsResponse;\n};\n\nconst initialState: TLogCallsState = {\n  all: undefined,\n};\n\nconst logCallsReducer = createReducer(initialState, (handleAction) => [\n  handleAction(fetchLogCallsAction.success, (state, { payload }) => ({\n    ...state,\n    all: payload.logCalls,\n  })),\n]);\n\nexport default logCallsReducer;\n"]},"metadata":{},"sourceType":"module"}