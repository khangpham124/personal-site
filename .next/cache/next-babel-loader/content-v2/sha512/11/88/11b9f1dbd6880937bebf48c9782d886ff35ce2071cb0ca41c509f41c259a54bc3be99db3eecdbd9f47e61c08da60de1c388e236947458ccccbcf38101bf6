{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createReducer } from \"deox\";\nimport { fetchAnalyticsLeadsAction, fetchAnalyticsLogcallsAction, fetchAnalyticsCustomersAction, fetchAnalyticsTotalDurationAction, fetchAnalyticsConversionRateAction } from \"../actions/analytics\";\nimport { combineReducers } from \"redux\";\nconst initialLeadsState = null;\nconst initialLogcallsState = null;\nconst initialCustomersState = null;\nconst initialTotalDurationState = null;\nconst initialConversionRateState = null;\nconst analyticsLeadsReducer = createReducer(initialLeadsState, handleAction => [handleAction(fetchAnalyticsLeadsAction.success, (state, {\n  payload\n}) => _objectSpread(_objectSpread({}, state), payload.analytics))]);\nconst analyticsLogcallsReducer = createReducer(initialLogcallsState, handleAction => [handleAction(fetchAnalyticsLogcallsAction.success, (state, {\n  payload\n}) => _objectSpread(_objectSpread({}, state), payload.analytics))]);\nconst analyticsCustomersReducer = createReducer(initialCustomersState, handleAction => [handleAction(fetchAnalyticsCustomersAction.success, (state, {\n  payload\n}) => _objectSpread(_objectSpread({}, state), payload.analytics))]);\nconst analyticsTotalDurationReducer = createReducer(initialTotalDurationState, handleAction => [handleAction(fetchAnalyticsTotalDurationAction.success, (state, {\n  payload\n}) => _objectSpread(_objectSpread({}, state), payload.analytics))]);\nconst analyticsConversionRateReducer = createReducer(initialConversionRateState, handleAction => [handleAction(fetchAnalyticsConversionRateAction.success, (state, {\n  payload\n}) => _objectSpread(_objectSpread({}, state), payload.analytics))]);\nexport default combineReducers({\n  leads: analyticsLeadsReducer,\n  logcalls: analyticsLogcallsReducer,\n  customers: analyticsCustomersReducer,\n  totalDuration: analyticsTotalDurationReducer,\n  conversionRate: analyticsConversionRateReducer\n});","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/state-management/reducers/analytics.ts"],"names":["createReducer","fetchAnalyticsLeadsAction","fetchAnalyticsLogcallsAction","fetchAnalyticsCustomersAction","fetchAnalyticsTotalDurationAction","fetchAnalyticsConversionRateAction","combineReducers","initialLeadsState","initialLogcallsState","initialCustomersState","initialTotalDurationState","initialConversionRateState","analyticsLeadsReducer","handleAction","success","state","payload","analytics","analyticsLogcallsReducer","analyticsCustomersReducer","analyticsTotalDurationReducer","analyticsConversionRateReducer","leads","logcalls","customers","totalDuration","conversionRate"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAA8B,MAA9B;AACA,SACEC,yBADF,EAEEC,4BAFF,EAGEC,6BAHF,EAIEC,iCAJF,EAKEC,kCALF,QAMO,sBANP;AAWA,SAASC,eAAT,QAAgC,OAAhC;AAEA,MAAMC,iBAAqC,GAAG,IAA9C;AACA,MAAMC,oBAAwC,GAAG,IAAjD;AACA,MAAMC,qBAAyC,GAAG,IAAlD;AACA,MAAMC,yBAA6C,GAAG,IAAtD;AACA,MAAMC,0BAAmD,GAAG,IAA5D;AAEA,MAAMC,qBAAqB,GAAGZ,aAAa,CACzCO,iBADyC,EAExCM,YAAD,IAAkB,CAChBA,YAAY,CAACZ,yBAAyB,CAACa,OAA3B,EAAoC,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,qCAC3CD,KAD2C,GAE3CC,OAAO,CAACC,SAFmC,CAApC,CADI,CAFuB,CAA3C;AAUA,MAAMC,wBAAwB,GAAGlB,aAAa,CAC5CQ,oBAD4C,EAE3CK,YAAD,IAAkB,CAChBA,YAAY,CACVX,4BAA4B,CAACY,OADnB,EAEV,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,qCAA8BD,KAA9B,GAAwCC,OAAO,CAACC,SAAhD,CAFU,CADI,CAF0B,CAA9C;AAUA,MAAME,yBAAyB,GAAGnB,aAAa,CAC7CS,qBAD6C,EAE5CI,YAAD,IAAkB,CAChBA,YAAY,CACVV,6BAA6B,CAACW,OADpB,EAEV,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,qCAA8BD,KAA9B,GAAwCC,OAAO,CAACC,SAAhD,CAFU,CADI,CAF2B,CAA/C;AAUA,MAAMG,6BAA6B,GAAGpB,aAAa,CACjDU,yBADiD,EAEhDG,YAAD,IAAkB,CAChBA,YAAY,CACVT,iCAAiC,CAACU,OADxB,EAEV,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,qCAA8BD,KAA9B,GAAwCC,OAAO,CAACC,SAAhD,CAFU,CADI,CAF+B,CAAnD;AAUA,MAAMI,8BAA8B,GAAGrB,aAAa,CAClDW,0BADkD,EAEjDE,YAAD,IAAkB,CAChBA,YAAY,CACVR,kCAAkC,CAACS,OADzB,EAEV,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,qCAA8BD,KAA9B,GAAwCC,OAAO,CAACC,SAAhD,CAFU,CADI,CAFgC,CAApD;AAUA,eAAeX,eAAe,CAAC;AAC7BgB,EAAAA,KAAK,EAAEV,qBADsB;AAE7BW,EAAAA,QAAQ,EAAEL,wBAFmB;AAG7BM,EAAAA,SAAS,EAAEL,yBAHkB;AAI7BM,EAAAA,aAAa,EAAEL,6BAJc;AAK7BM,EAAAA,cAAc,EAAEL;AALa,CAAD,CAA9B","sourcesContent":["import { createReducer } from \"deox\";\nimport {\n  fetchAnalyticsLeadsAction,\n  fetchAnalyticsLogcallsAction,\n  fetchAnalyticsCustomersAction,\n  fetchAnalyticsTotalDurationAction,\n  fetchAnalyticsConversionRateAction,\n} from \"../actions/analytics\";\nimport {\n  TAnalyticsResponse,\n  TConversionRateResponse,\n} from \"services/identity/analytics/types\";\nimport { combineReducers } from \"redux\";\n\nconst initialLeadsState: TAnalyticsResponse = null;\nconst initialLogcallsState: TAnalyticsResponse = null;\nconst initialCustomersState: TAnalyticsResponse = null;\nconst initialTotalDurationState: TAnalyticsResponse = null;\nconst initialConversionRateState: TConversionRateResponse = null;\n\nconst analyticsLeadsReducer = createReducer(\n  initialLeadsState,\n  (handleAction) => [\n    handleAction(fetchAnalyticsLeadsAction.success, (state, { payload }) => ({\n      ...state,\n      ...payload.analytics,\n    })),\n  ]\n);\n\nconst analyticsLogcallsReducer = createReducer(\n  initialLogcallsState,\n  (handleAction) => [\n    handleAction(\n      fetchAnalyticsLogcallsAction.success,\n      (state, { payload }) => ({ ...state, ...payload.analytics })\n    ),\n  ]\n);\n\nconst analyticsCustomersReducer = createReducer(\n  initialCustomersState,\n  (handleAction) => [\n    handleAction(\n      fetchAnalyticsCustomersAction.success,\n      (state, { payload }) => ({ ...state, ...payload.analytics })\n    ),\n  ]\n);\n\nconst analyticsTotalDurationReducer = createReducer(\n  initialTotalDurationState,\n  (handleAction) => [\n    handleAction(\n      fetchAnalyticsTotalDurationAction.success,\n      (state, { payload }) => ({ ...state, ...payload.analytics })\n    ),\n  ]\n);\n\nconst analyticsConversionRateReducer = createReducer(\n  initialConversionRateState,\n  (handleAction) => [\n    handleAction(\n      fetchAnalyticsConversionRateAction.success,\n      (state, { payload }) => ({ ...state, ...payload.analytics })\n    ),\n  ]\n);\n\nexport default combineReducers({\n  leads: analyticsLeadsReducer,\n  logcalls: analyticsLogcallsReducer,\n  customers: analyticsCustomersReducer,\n  totalDuration: analyticsTotalDurationReducer,\n  conversionRate: analyticsConversionRateReducer,\n});\n"]},"metadata":{},"sourceType":"module"}