{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport HttpClient from '../../../utils/axios/instance';\nimport { crmPlatform } from \"src/services/identity\";\n\nclass Products extends HttpClient {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"fetchProducts\", async (pageIndex, pageSize, optionalParams, companyId, projectID) => {\n      const response = await this.instance.get(`${crmPlatform}/products?pageIndex=${pageIndex}&pageSize=${pageSize}&companyId=${companyId}${projectID ? `&projectId=${projectID}` : ``}`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"fetchProduct\", async id => {\n      const response = await this.instance.get(`${crmPlatform}/products/${id}`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"createProduct\", async (body) => {\n      const response = await this.instance.post(`${crmPlatform}/products`, body);\n      return response.data;\n    });\n\n    _defineProperty(this, \"updateProduct\", async (id, body) => {\n      const response = await this.instance.patch(`${crmPlatform}/products/${id}`, body);\n      return response.data;\n    });\n\n    _defineProperty(this, \"exportProduct\", async id => {\n      const response = await this.instance.get(`${crmPlatform}/products/${id}/export`);\n      return response.data;\n    });\n  }\n\n}\n\nconst ProductsInstance = new Products();\nexport default ProductsInstance;\nexport class ProductstAPI extends HttpClient {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"fetchProducts\", async (pageIndex, pageSize, optionalParams, companyId) => {\n      const response = await this.instance.get(`${crmPlatform}/products?pageIndex=${pageIndex}&pageSize=${pageSize}&companyId=${companyId}&sort={ \"createdAt\": \"DESC\" }`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"exportProduct\", async body => {\n      const response = await this.instance.post(`${crmPlatform}/products/export`, body);\n      return response.data;\n    });\n\n    _defineProperty(this, \"getDetailProduct\", async id => {\n      const response = await this.instance.get(`${crmPlatform}/products/${id}`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"createProduct\", async (body) => {\n      const response = await this.instance.post(`${crmPlatform}/products`, body);\n      return response.data;\n    });\n\n    _defineProperty(this, \"updateProduct\", async (body, id) => {\n      const response = await this.instance.patch(`${crmPlatform}/products/${id}`, body);\n      return response.data;\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/services/identity/products/index.ts"],"names":["HttpClient","crmPlatform","Products","pageIndex","pageSize","optionalParams","companyId","projectID","response","instance","get","data","id","body","post","patch","ProductsInstance","ProductstAPI"],"mappings":"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","sourcesContent":["import HttpClient from '../../../utils/axios/instance';\nimport { catchAxiosError } from \"../../../utils/axios/error\";\nimport { IResponse, IConfig } from \"../../../utils/axios/entities\";\nimport {\n  TFetchProductsResponse,\n  TFetchProductResponse,\n  TUpdateProductBody,\n  TCreateProductBody,\n  TCreateProductResponse,\n  TProduct\n} from \"./types\";\nimport { crmPlatform } from \"src/services/identity\";\n\nclass Products extends HttpClient {\n  fetchProducts = async (\n    pageIndex: number,\n    pageSize: number,\n    optionalParams: any,\n    companyId?: string,\n    projectID?:string\n  ): Promise<IResponse> => {\n    const response = await this.instance.get(`${crmPlatform}/products?pageIndex=${pageIndex}&pageSize=${pageSize}&companyId=${companyId}${projectID ? `&projectId=${projectID}` : ``}`);\n    return response.data;\n  };\n\n  fetchProduct = async (id: string): Promise<IResponse> => {\n    const response = await this.instance.get(`${crmPlatform}/products/${id}`);\n    return response.data;\n  };\n\n  createProduct = async (\n    body: TCreateProductBody\n  ): Promise<IResponse> => {\n    const response = await this.instance.post(`${crmPlatform}/products`, body);\n    return response.data;\n  };\n\n  updateProduct = async (\n    id: string,\n    body: TUpdateProductBody\n  ): Promise<TFetchProductResponse> => {\n    const response = await this.instance.patch(`${crmPlatform}/products/${id}`, body);\n    return response.data;\n  };\n\n  //   convertToCustomer = async (id: string): Promise<TConvertToCustomerResponse> => {\n  //     const response = await this.instance.get(`/leads/${id}/convert-to-customer`);\n  //     return response.data;\n  //   };\n\n  exportProduct = async (id: string): Promise<TFetchProductsResponse> => {\n    const response = await this.instance.get(`${crmPlatform}/products/${id}/export`);\n    return response.data;\n  };\n}\n\nconst ProductsInstance = new Products();\nexport default ProductsInstance;\n\n\nexport class ProductstAPI extends HttpClient {\n  public fetchProducts = async (\n    pageIndex: number,\n    pageSize: number,\n    optionalParams: any,\n    companyId?: string\n  ): Promise<IResponse> => {\n    const response = await this.instance.get(`${crmPlatform}/products?pageIndex=${pageIndex}&pageSize=${pageSize}&companyId=${companyId}&sort={ \"createdAt\": \"DESC\" }`);\n    return response.data;\n  };\n\n  public exportProduct = async (body: any): Promise<TFetchProductsResponse> => {\n    const response = await this.instance.post(`${crmPlatform}/products/export`, body);\n    return response.data;\n  };\n\n  public getDetailProduct = async (id: string): Promise<TProduct> => {\n    const response = await this.instance.get(`${crmPlatform}/products/${id}`);\n    return response.data;\n  };\n\n  public createProduct = async (\n    body: TCreateProductBody\n  ): Promise<IResponse> => {\n    const response = await this.instance.post(`${crmPlatform}/products`, body);\n    return response.data;\n  };\n\n  public updateProduct = async (\n    body: TUpdateProductBody,\n    id:string\n  ): Promise<IResponse> => {\n    const response = await this.instance.patch(`${crmPlatform}/products/${id}`, body);\n    return response.data;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}