{"ast":null,"code":"import { createActionCreator } from \"deox\";\nimport { ELogCallsActions } from \"./constants\";\nexport var fetchLogCallsAction = {\n  request: createActionCreator(ELogCallsActions.FETCH_LOG_CALLS_REQUEST, function (resolve) {\n    return function (type, id, pageIndex, pageSize, cb) {\n      return resolve({\n        type: type,\n        id: id,\n        pageIndex: pageIndex,\n        pageSize: pageSize,\n        cb: cb\n      });\n    };\n  }),\n  success: createActionCreator(ELogCallsActions.FETCH_LOG_CALLS_SUCCESS, function (resolve) {\n    return function (logCalls) {\n      return resolve({\n        logCalls: logCalls\n      });\n    };\n  }),\n  failure: createActionCreator(ELogCallsActions.FETCH_LOG_CALLS_FAILED, function (resolve) {\n    return function (error) {\n      return resolve({\n        error: error\n      });\n    };\n  })\n};\nexport var createLogCallAction = {\n  request: createActionCreator(ELogCallsActions.CREATE_LOG_CALL_REQUEST, function (resolve) {\n    return function (type, id, body, cb) {\n      return resolve({\n        type: type,\n        id: id,\n        body: body,\n        cb: cb\n      });\n    };\n  }),\n  success: createActionCreator(ELogCallsActions.CREATE_LOG_CALL_SUCCESS, function (resolve) {\n    return function () {\n      return resolve();\n    };\n  }),\n  failure: createActionCreator(ELogCallsActions.CREATE_LOG_CALL_FAILED, function (resolve) {\n    return function (error) {\n      return resolve({\n        error: error\n      });\n    };\n  })\n};","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/state-management/actions/log-calls/index.ts"],"names":["createActionCreator","ELogCallsActions","fetchLogCallsAction","request","FETCH_LOG_CALLS_REQUEST","resolve","type","id","pageIndex","pageSize","cb","success","FETCH_LOG_CALLS_SUCCESS","logCalls","failure","FETCH_LOG_CALLS_FAILED","error","createLogCallAction","CREATE_LOG_CALL_REQUEST","body","CREATE_LOG_CALL_SUCCESS","CREATE_LOG_CALL_FAILED"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,MAApC;AAEA,SAASC,gBAAT,QAAiC,aAAjC;AAMA,OAAO,IAAMC,mBAAmB,GAAG;AACjCC,EAAAA,OAAO,EAAEH,mBAAmB,CAC1BC,gBAAgB,CAACG,uBADS,EAE1B,UAACC,OAAD;AAAA,WACE,UACEC,IADF,EAEEC,EAFF,EAGEC,SAHF,EAIEC,QAJF,EAKEC,EALF;AAAA,aAOEL,OAAO,CAAC;AAAEC,QAAAA,IAAI,EAAJA,IAAF;AAAQC,QAAAA,EAAE,EAAFA,EAAR;AAAYC,QAAAA,SAAS,EAATA,SAAZ;AAAuBC,QAAAA,QAAQ,EAARA,QAAvB;AAAiCC,QAAAA,EAAE,EAAFA;AAAjC,OAAD,CAPT;AAAA,KADF;AAAA,GAF0B,CADK;AAajCC,EAAAA,OAAO,EAAEX,mBAAmB,CAC1BC,gBAAgB,CAACW,uBADS,EAE1B,UAACP,OAAD;AAAA,WAAa,UAACQ,QAAD;AAAA,aAAsCR,OAAO,CAAC;AAAEQ,QAAAA,QAAQ,EAARA;AAAF,OAAD,CAA7C;AAAA,KAAb;AAAA,GAF0B,CAbK;AAiBjCC,EAAAA,OAAO,EAAEd,mBAAmB,CAC1BC,gBAAgB,CAACc,sBADS,EAE1B,UAACV,OAAD;AAAA,WAAa,UAACW,KAAD;AAAA,aAAWX,OAAO,CAAC;AAAEW,QAAAA,KAAK,EAALA;AAAF,OAAD,CAAlB;AAAA,KAAb;AAAA,GAF0B;AAjBK,CAA5B;AAuBP,OAAO,IAAMC,mBAAmB,GAAG;AACjCd,EAAAA,OAAO,EAAEH,mBAAmB,CAC1BC,gBAAgB,CAACiB,uBADS,EAE1B,UAACb,OAAD;AAAA,WACE,UACEC,IADF,EAEEC,EAFF,EAGEY,IAHF,EAIET,EAJF;AAAA,aAMEL,OAAO,CAAC;AAAEC,QAAAA,IAAI,EAAJA,IAAF;AAAQC,QAAAA,EAAE,EAAFA,EAAR;AAAYY,QAAAA,IAAI,EAAJA,IAAZ;AAAkBT,QAAAA,EAAE,EAAFA;AAAlB,OAAD,CANT;AAAA,KADF;AAAA,GAF0B,CADK;AAYjCC,EAAAA,OAAO,EAAEX,mBAAmB,CAC1BC,gBAAgB,CAACmB,uBADS,EAE1B,UAACf,OAAD;AAAA,WAAa;AAAA,aAAMA,OAAO,EAAb;AAAA,KAAb;AAAA,GAF0B,CAZK;AAgBjCS,EAAAA,OAAO,EAAEd,mBAAmB,CAC1BC,gBAAgB,CAACoB,sBADS,EAE1B,UAAChB,OAAD;AAAA,WAAa,UAACW,KAAD;AAAA,aAAWX,OAAO,CAAC;AAAEW,QAAAA,KAAK,EAALA;AAAF,OAAD,CAAlB;AAAA,KAAb;AAAA,GAF0B;AAhBK,CAA5B","sourcesContent":["import { createActionCreator } from \"deox\";\n\nimport { ELogCallsActions } from \"./constants\";\nimport {\n  TCreateLogCallBody,\n  TFetchLogCallsResponse,\n} from \"services/identity/log-calls/types\";\n\nexport const fetchLogCallsAction = {\n  request: createActionCreator(\n    ELogCallsActions.FETCH_LOG_CALLS_REQUEST,\n    (resolve) =>\n      (\n        type: \"lead\" | \"customer\",\n        id: string,\n        pageIndex: number,\n        pageSize: number,\n        cb?: () => void\n      ) =>\n        resolve({ type, id, pageIndex, pageSize, cb })\n  ),\n  success: createActionCreator(\n    ELogCallsActions.FETCH_LOG_CALLS_SUCCESS,\n    (resolve) => (logCalls: TFetchLogCallsResponse) => resolve({ logCalls })\n  ),\n  failure: createActionCreator(\n    ELogCallsActions.FETCH_LOG_CALLS_FAILED,\n    (resolve) => (error) => resolve({ error })\n  ),\n};\n\nexport const createLogCallAction = {\n  request: createActionCreator(\n    ELogCallsActions.CREATE_LOG_CALL_REQUEST,\n    (resolve) =>\n      (\n        type: \"lead\" | \"customer\",\n        id: string,\n        body: TCreateLogCallBody,\n        cb?: () => void\n      ) =>\n        resolve({ type, id, body, cb })\n  ),\n  success: createActionCreator(\n    ELogCallsActions.CREATE_LOG_CALL_SUCCESS,\n    (resolve) => () => resolve()\n  ),\n  failure: createActionCreator(\n    ELogCallsActions.CREATE_LOG_CALL_FAILED,\n    (resolve) => (error) => resolve({ error })\n  ),\n};\n"]},"metadata":{},"sourceType":"module"}