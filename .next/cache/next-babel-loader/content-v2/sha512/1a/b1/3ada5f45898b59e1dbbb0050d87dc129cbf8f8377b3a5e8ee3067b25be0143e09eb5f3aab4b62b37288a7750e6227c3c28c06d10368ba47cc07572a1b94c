{"ast":null,"code":"import _regeneratorRuntime from \"/Users/admin/Documents/personal-site/node_modules/next/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchLogCallsSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(createLogCallSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(root);\n\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { createLogCallAction, fetchLogCallsAction } from \"../actions/log-calls\";\nimport LogCallsInstance from \"services/identity/log-calls\";\nexport function fetchLogCallsSaga(action) {\n  var _action$payload, type, id, pageIndex, pageSize, cb, response;\n\n  return _regeneratorRuntime.wrap(function fetchLogCallsSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _action$payload = action.payload, type = _action$payload.type, id = _action$payload.id, pageIndex = _action$payload.pageIndex, pageSize = _action$payload.pageSize, cb = _action$payload.cb;\n          _context.next = 4;\n          return call(LogCallsInstance.fetchLogCalls, type, id, pageIndex, pageSize);\n\n        case 4:\n          response = _context.sent;\n          _context.next = 7;\n          return put(fetchLogCallsAction.success(response));\n\n        case 7:\n          cb === null || cb === void 0 ? void 0 : cb();\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put(fetchLogCallsAction.failure(_context.t0));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\nexport function createLogCallSaga(action) {\n  var _action$payload2, type, id, body, cb;\n\n  return _regeneratorRuntime.wrap(function createLogCallSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _action$payload2 = action.payload, type = _action$payload2.type, id = _action$payload2.id, body = _action$payload2.body, cb = _action$payload2.cb;\n          _context2.next = 4;\n          return call(LogCallsInstance.createLogCall, type, id, body);\n\n        case 4:\n          cb === null || cb === void 0 ? void 0 : cb();\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put(createLogCallAction.failure(_context2.t0));\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\nexport default function root() {\n  return _regeneratorRuntime.wrap(function root$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeLatest(fetchLogCallsAction.request.type, fetchLogCallsSaga), takeLatest(createLogCallAction.request.type, createLogCallSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/state-management/sagas/log-calls.ts"],"names":["fetchLogCallsSaga","createLogCallSaga","root","all","call","put","takeLatest","createLogCallAction","fetchLogCallsAction","LogCallsInstance","action","payload","type","id","pageIndex","pageSize","cb","fetchLogCalls","response","success","failure","body","createLogCall","request"],"mappings":";;oDAYiBA,iB;qDAmBAC,iB;qDAYQC,I;;AA3CzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AAGA,SACEC,mBADF,EAEEC,mBAFF,QAGO,sBAHP;AAIA,OAAOC,gBAAP,MAA6B,6BAA7B;AAKA,OAAO,SAAUT,iBAAV,CACLU,MADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAI2CA,MAAM,CAACC,OAJlD,EAIKC,IAJL,mBAIKA,IAJL,EAIWC,EAJX,mBAIWA,EAJX,EAIeC,SAJf,mBAIeA,SAJf,EAI0BC,QAJ1B,mBAI0BA,QAJ1B,EAIoCC,EAJpC,mBAIoCA,EAJpC;AAAA;AAKc,iBAAMZ,IAAI,CACzBK,gBAAgB,CAACQ,aADQ,EAEzBL,IAFyB,EAGzBC,EAHyB,EAIzBC,SAJyB,EAKzBC,QALyB,CAAV;;AALd;AAKGG,UAAAA,QALH;AAAA;AAYH,iBAAMb,GAAG,CAACG,mBAAmB,CAACW,OAApB,CAA4BD,QAA5B,CAAD,CAAT;;AAZG;AAaHF,UAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,YAAAA,EAAE;AAbC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAeH,iBAAMX,GAAG,CAACG,mBAAmB,CAACY,OAApB,aAAD,CAAT;;AAfG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBP,OAAO,SAAUnB,iBAAV,CACLS,MADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAI4BA,MAAM,CAACC,OAJnC,EAIKC,IAJL,oBAIKA,IAJL,EAIWC,EAJX,oBAIWA,EAJX,EAIeQ,IAJf,oBAIeA,IAJf,EAIqBL,EAJrB,oBAIqBA,EAJrB;AAAA;AAKH,iBAAMZ,IAAI,CAACK,gBAAgB,CAACa,aAAlB,EAAiCV,IAAjC,EAAuCC,EAAvC,EAA2CQ,IAA3C,CAAV;;AALG;AAMHL,UAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,YAAAA,EAAE;AANC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQH,iBAAMX,GAAG,CAACE,mBAAmB,CAACa,OAApB,cAAD,CAAT;;AARG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYP,eAAe,SAAUlB,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRG,UAAU,CAACE,mBAAmB,CAACe,OAApB,CAA4BX,IAA7B,EAAmCZ,iBAAnC,CADF,EAERM,UAAU,CAACC,mBAAmB,CAACgB,OAApB,CAA4BX,IAA7B,EAAmCX,iBAAnC,CAFF,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { ActionType } from \"deox\";\n\nimport {\n  createLogCallAction,\n  fetchLogCallsAction,\n} from \"../actions/log-calls\";\nimport LogCallsInstance from \"services/identity/log-calls\";\nimport {\n  TFetchLogCallsResponse,\n} from \"services/identity/log-calls/types\";\n\nexport function* fetchLogCallsSaga(\n  action: ActionType<typeof fetchLogCallsAction.request>\n): Generator {\n  try {\n    const { type, id, pageIndex, pageSize, cb } = action.payload;\n    const response = yield call(\n      LogCallsInstance.fetchLogCalls,\n      type,\n      id,\n      pageIndex,\n      pageSize\n    );\n    yield put(fetchLogCallsAction.success(response as TFetchLogCallsResponse));\n    cb?.();\n  } catch (err) {\n    yield put(fetchLogCallsAction.failure(err));\n  }\n}\n\nexport function* createLogCallSaga(\n  action: ActionType<typeof createLogCallAction.request>\n): Generator {\n  try {\n    const { type, id, body, cb } = action.payload;\n    yield call(LogCallsInstance.createLogCall, type, id, body);\n    cb?.();\n  } catch (err) {\n    yield put(createLogCallAction.failure(err));\n  }\n}\n\nexport default function* root(): Generator {\n  yield all([\n    takeLatest(fetchLogCallsAction.request.type, fetchLogCallsSaga),\n    takeLatest(createLogCallAction.request.type, createLogCallSaga),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}