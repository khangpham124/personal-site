{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createReducer } from 'deox';\nimport { fetchLeadAction, fetchLeadsAction } from '../actions/leads';\nconst initialState = {\n  data: undefined,\n  leadById: undefined\n};\nconst leadsReducer = createReducer(initialState, handleAction => [handleAction(fetchLeadsAction.success, (state, {\n  payload\n}) => _objectSpread(_objectSpread({}, state), {}, {\n  data: payload.leads\n})), handleAction(fetchLeadAction.success, (state, {\n  payload\n}) => _objectSpread(_objectSpread({}, state), {}, {\n  leadById: payload.lead\n}))]);\nexport default leadsReducer;","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/state-management/reducers/leads.ts"],"names":["createReducer","fetchLeadAction","fetchLeadsAction","initialState","data","undefined","leadById","leadsReducer","handleAction","success","state","payload","leads","lead"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAA8B,MAA9B;AAEA,SAASC,eAAT,EAA0BC,gBAA1B,QAAkD,kBAAlD;AAQA,MAAMC,YAAyB,GAAG;AAChCC,EAAAA,IAAI,EAAEC,SAD0B;AAEhCC,EAAAA,QAAQ,EAAED;AAFsB,CAAlC;AAKA,MAAME,YAAY,GAAGP,aAAa,CAACG,YAAD,EAAgBK,YAAD,IAAkB,CACjEA,YAAY,CAACN,gBAAgB,CAACO,OAAlB,EAA2B,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,qCAClCD,KADkC;AAErCN,EAAAA,IAAI,EAAEO,OAAO,CAACC;AAFuB,EAA3B,CADqD,EAKjEJ,YAAY,CAACP,eAAe,CAACQ,OAAjB,EAA0B,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,qCACjCD,KADiC;AAEpCJ,EAAAA,QAAQ,EAAEK,OAAO,CAACE;AAFkB,EAA1B,CALqD,CAAjC,CAAlC;AAWA,eAAeN,YAAf","sourcesContent":["import { createReducer } from 'deox';\n\nimport { fetchLeadAction, fetchLeadsAction } from '../actions/leads';\nimport { TFetchLeadResponse, TFetchLeadsResponse } from 'services/identity/leads/types';\n\ntype TLeadsState = {\n  data?: TFetchLeadsResponse;\n  leadById?: TFetchLeadResponse;\n};\n\nconst initialState: TLeadsState = {\n  data: undefined,\n  leadById: undefined,\n};\n\nconst leadsReducer = createReducer(initialState, (handleAction) => [\n  handleAction(fetchLeadsAction.success, (state, { payload }) => ({\n    ...state,\n    data: payload.leads,\n  })),\n  handleAction(fetchLeadAction.success, (state, { payload }) => ({\n    ...state,\n    leadById: payload.lead,\n  })),\n]);\n\nexport default leadsReducer;\n"]},"metadata":{},"sourceType":"module"}