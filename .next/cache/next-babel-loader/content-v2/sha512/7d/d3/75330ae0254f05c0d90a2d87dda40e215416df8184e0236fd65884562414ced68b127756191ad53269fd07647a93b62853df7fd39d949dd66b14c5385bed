{"ast":null,"code":"import _regeneratorRuntime from \"/Users/admin/Documents/personal-site/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/admin/Documents/personal-site/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/admin/Documents/personal-site/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"/Users/admin/Documents/personal-site/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/admin/Documents/personal-site/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/admin/Documents/personal-site/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/admin/Documents/personal-site/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/admin/Documents/personal-site/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport HttpClient from '../../../utils/axios/instance';\nimport { crmPlatform } from \"src/services/identity\";\nimport Cookies from \"js-cookie\";\n\nvar Analytics = /*#__PURE__*/function (_HttpClient) {\n  _inherits(Analytics, _HttpClient);\n\n  var _super = _createSuper(Analytics);\n\n  function Analytics() {\n    var _this;\n\n    _classCallCheck(this, Analytics);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchAnalytics\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fromDate, toDate, dimension, entity, question) {\n        var _localStorage$getItem;\n\n        var params, accountInfo, companyID, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                params = {\n                  fromDate: fromDate,\n                  toDate: toDate,\n                  dimension: dimension,\n                  entity: entity,\n                  question: question\n                };\n                accountInfo = JSON.parse((_localStorage$getItem = localStorage.getItem(\"accounts\")) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : \"{}\");\n                companyID = String(Cookies.get(\"companyID\"));\n                _context.next = 5;\n                return _this.instance.get(\"\".concat(crmPlatform, \"/analytics?companyId=\").concat(companyID), {\n                  params: params\n                });\n\n              case 5:\n                response = _context.sent;\n                return _context.abrupt(\"return\", response.data);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3, _x4, _x5) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  return Analytics;\n}(HttpClient);\n\nvar AnalyticsInstance = new Analytics();\nexport default AnalyticsInstance;","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/services/identity/analytics/index.ts"],"names":["HttpClient","crmPlatform","Cookies","Analytics","fromDate","toDate","dimension","entity","question","params","accountInfo","JSON","parse","localStorage","getItem","companyID","String","get","instance","response","data","AnalyticsInstance"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,UAAP,MAAuB,+BAAvB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AAGA,OAAOC,OAAP,MAAoB,WAApB;;IAEMC,S;;;;;;;;;;;;;;;;;0EACa,iBAAOC,QAAP,EAAyBC,MAAzB,EAAyCC,SAAzC,EAAiFC,MAAjF,EAAmHC,QAAnH;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,gBAAAA,MADS,GACA;AAAEL,kBAAAA,QAAQ,EAARA,QAAF;AAAYC,kBAAAA,MAAM,EAANA,MAAZ;AAAoBC,kBAAAA,SAAS,EAATA,SAApB;AAA+BC,kBAAAA,MAAM,EAANA,MAA/B;AAAuCC,kBAAAA,QAAQ,EAARA;AAAvC,iBADA;AAETE,gBAAAA,WAFS,GAEKC,IAAI,CAACC,KAAL,0BAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,yEAA+C,IAA/C,CAFL;AAGTC,gBAAAA,SAHS,GAGGC,MAAM,CAACd,OAAO,CAACe,GAAR,CAAY,WAAZ,CAAD,CAHT;AAAA;AAAA,uBAIQ,MAAKC,QAAL,CAAcD,GAAd,WAAqBhB,WAArB,kCAAwDc,SAAxD,GAAqE;AAAEN,kBAAAA,MAAM,EAANA;AAAF,iBAArE,CAJR;;AAAA;AAITU,gBAAAA,QAJS;AAAA,iDAKRA,QAAQ,CAACC,IALD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;EADKpB,U;;AAUxB,IAAMqB,iBAAiB,GAAG,IAAIlB,SAAJ,EAA1B;AACA,eAAekB,iBAAf","sourcesContent":["import HttpClient from '../../../utils/axios/instance';\nimport { crmPlatform } from \"src/services/identity\";\n\nimport { TFetchAnalyticsResponse, inputAnalytics } from './types';\nimport Cookies from \"js-cookie\";\n\nclass Analytics extends HttpClient {\n  fetchAnalytics = async (fromDate: string, toDate: string, dimension: inputAnalytics[\"dimension\"], entity: inputAnalytics[\"entity\"], question: inputAnalytics[\"question\"]): Promise<TFetchAnalyticsResponse> => {\n    const params = { fromDate, toDate, dimension, entity, question };\n    const accountInfo = JSON.parse(localStorage.getItem(\"accounts\") ?? \"{}\");\n    const companyID = String(Cookies.get(\"companyID\"));\n    const response = await this.instance.get(`${crmPlatform}/analytics?companyId=${companyID}`, { params });\n    return response.data;\n  };\n}\n\nconst AnalyticsInstance = new Analytics();\nexport default AnalyticsInstance;\n"]},"metadata":{},"sourceType":"module"}