{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport HttpClient from '../../../utils/axios/instance';\nimport { crmPlatform } from \"src/services/identity\";\n\nclass LogCalls extends HttpClient {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"fetchLogCalls\", async (type, id, pageIndex, pageSize) => {\n      const response = await this.instance.get(`${crmPlatform}/log-calls/${type}/${id}?pageIndex=${pageIndex}&pageSize=${pageSize}`);\n      return response.data;\n    });\n\n    _defineProperty(this, \"createLogCall\", async (type, id, body) => {\n      const response = await this.instance.post(`${crmPlatform}/log-calls/${type}/${id}`, body);\n      return response.data;\n    });\n  }\n\n}\n\nconst LogCallsInstance = new LogCalls();\nexport default LogCallsInstance;","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/services/identity/log-calls/index.ts"],"names":["HttpClient","crmPlatform","LogCalls","type","id","pageIndex","pageSize","response","instance","get","data","body","post","LogCallsInstance"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,+BAAvB;AAMA,SAASC,WAAT,QAA4B,uBAA5B;;AAEA,MAAMC,QAAN,SAAuBF,UAAvB,CAAkC;AAAA;AAAA;;AAAA,2CAChB,OACdG,IADc,EAEdC,EAFc,EAGdC,SAHc,EAIdC,QAJc,KAKsB;AACpC,YAAMC,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcC,GAAd,CACpB,GAAER,WAAY,cAAaE,IAAK,IAAGC,EAAG,cAAaC,SAAU,aAAYC,QAAS,EAD9D,CAAvB;AAGA,aAAOC,QAAQ,CAACG,IAAhB;AACD,KAX+B;;AAAA,2CAahB,OACdP,IADc,EAEdC,EAFc,EAGdO,IAHc,KAIO;AACrB,YAAMJ,QAAQ,GAAG,MAAM,KAAKC,QAAL,CAAcI,IAAd,CACpB,GAAEX,WAAY,cAAaE,IAAK,IAAGC,EAAG,EADlB,EAErBO,IAFqB,CAAvB;AAIA,aAAOJ,QAAQ,CAACG,IAAhB;AACD,KAvB+B;AAAA;;AAAA;;AA0BlC,MAAMG,gBAAgB,GAAG,IAAIX,QAAJ,EAAzB;AACA,eAAeW,gBAAf","sourcesContent":["import HttpClient from '../../../utils/axios/instance';\nimport {\n  TFetchLogCallsResponse,\n  TCreateLogCallBody,\n} from \"./types\";\n\nimport { crmPlatform } from \"src/services/identity\";\n\nclass LogCalls extends HttpClient {\n  fetchLogCalls = async (\n    type: \"lead\" | \"customer\",\n    id: string,\n    pageIndex: number,\n    pageSize: number\n  ): Promise<TFetchLogCallsResponse> => {\n    const response = await this.instance.get(\n      `${crmPlatform}/log-calls/${type}/${id}?pageIndex=${pageIndex}&pageSize=${pageSize}`\n    );\n    return response.data;\n  };\n\n  createLogCall = async (\n    type: \"lead\" | \"customer\",\n    id: string,\n    body: TCreateLogCallBody\n  ): Promise<unknown> => {\n    const response = await this.instance.post(\n      `${crmPlatform}/log-calls/${type}/${id}`,\n      body\n    );\n    return response.data;\n  };\n}\n\nconst LogCallsInstance = new LogCalls();\nexport default LogCallsInstance;\n"]},"metadata":{},"sourceType":"module"}