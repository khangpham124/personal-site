{"ast":null,"code":"import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { convertLeadToCustomerAction, createLeadAction, fetchLeadAction, fetchLeadsAction, updateLeadAction, postLeadAttachmentByIDAction } from \"../actions/leads\";\nimport LeadsInstance from \"services/identity/leads\";\nexport function* fetchLeadsSaga(action) {\n  try {\n    const {\n      pageIndex,\n      pageSize,\n      companyId,\n      optionalParams,\n      cb\n    } = action.payload;\n    const response = yield call(LeadsInstance.fetchLeads, pageIndex, pageSize, companyId, optionalParams);\n    yield put(fetchLeadsAction.success(response));\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(fetchLeadsAction.failure(err));\n  }\n}\nexport function* fetchLeadSaga(action) {\n  try {\n    const {\n      id,\n      cb\n    } = action.payload;\n    const response = yield call(LeadsInstance.fetchLead, id);\n    yield put(fetchLeadAction.success(response));\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(fetchLeadAction.failure(err));\n  }\n}\nexport function* createLeadSaga(action) {\n  try {\n    const {\n      body,\n      cb\n    } = action.payload;\n    const response = yield call(LeadsInstance.createLead, body);\n    yield put(createLeadAction.success(response));\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(createLeadAction.failure(err));\n  }\n}\nexport function* updateLeadSaga(action) {\n  const {\n    id,\n    body,\n    successCb,\n    failedCb\n  } = action.payload;\n\n  try {\n    yield call(LeadsInstance.updateLead, id, body);\n    successCb === null || successCb === void 0 ? void 0 : successCb();\n  } catch (err) {\n    yield put(updateLeadAction.failure(err));\n    failedCb();\n  }\n}\nexport function* convertLeadToCustomerSaga(action) {\n  const {\n    id,\n    cb\n  } = action.payload;\n\n  try {\n    const response = yield call(LeadsInstance.convertToCustomer, id);\n    yield put(convertLeadToCustomerAction.success());\n    cb === null || cb === void 0 ? void 0 : cb(response);\n  } catch (err) {\n    yield put(convertLeadToCustomerAction.failure(err));\n  }\n}\nexport function* postLeadAttachmentByIDSaga(action) {\n  const {\n    id,\n    body,\n    cb\n  } = action.payload;\n\n  try {\n    const response = yield call(LeadsInstance.postLeadAttachmentByID, id, body);\n    yield put(postLeadAttachmentByIDAction.success(response));\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(postLeadAttachmentByIDAction.failure(err));\n  }\n}\nexport default function* root() {\n  yield all([takeLatest(fetchLeadsAction.request.type, fetchLeadsSaga), takeLatest(fetchLeadAction.request.type, fetchLeadSaga), takeLatest(createLeadAction.request.type, createLeadSaga), takeLatest(updateLeadAction.request.type, updateLeadSaga), takeLatest(convertLeadToCustomerAction.request.type, convertLeadToCustomerSaga), takeLatest(postLeadAttachmentByIDAction.request.type, postLeadAttachmentByIDSaga)]);\n}","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/state-management/sagas/leads.ts"],"names":["all","call","put","takeLatest","convertLeadToCustomerAction","createLeadAction","fetchLeadAction","fetchLeadsAction","updateLeadAction","postLeadAttachmentByIDAction","LeadsInstance","fetchLeadsSaga","action","pageIndex","pageSize","companyId","optionalParams","cb","payload","response","fetchLeads","success","err","failure","fetchLeadSaga","id","fetchLead","createLeadSaga","body","createLead","updateLeadSaga","successCb","failedCb","updateLead","convertLeadToCustomerSaga","convertToCustomer","postLeadAttachmentByIDSaga","postLeadAttachmentByID","root","request","type"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { ActionType } from \"deox\";\n\nimport {\n  convertLeadToCustomerAction,\n  createLeadAction,\n  fetchLeadAction,\n  fetchLeadsAction,\n  updateLeadAction,\n  postLeadAttachmentByIDAction\n} from \"../actions/leads\";\nimport LeadsInstance from \"services/identity/leads\";\nimport {\n  TCreateLeadResponse,\n  TFetchLeadResponse,\n  TFetchLeadsResponse,\n  TPostLeadAttachmentByIDResponse\n} from \"services/identity/leads/types\";\nimport { TCustomer } from \"services/identity/customers/types\";\n\nexport function* fetchLeadsSaga(\n  action: ActionType<typeof fetchLeadsAction.request>\n): Generator {\n  try {\n    const { pageIndex, pageSize, companyId, optionalParams, cb } = action.payload;\n    const response = yield call(LeadsInstance.fetchLeads, pageIndex, pageSize, companyId ,optionalParams);\n    yield put(fetchLeadsAction.success(response as TFetchLeadsResponse));\n    cb?.();\n  } catch (err) {\n    yield put(fetchLeadsAction.failure(err));\n  }\n}\n\nexport function* fetchLeadSaga(\n  action: ActionType<typeof fetchLeadAction.request>\n): Generator {\n  try {\n    const { id, cb } = action.payload;\n    const response = yield call(LeadsInstance.fetchLead, id);\n    yield put(fetchLeadAction.success(response as TFetchLeadResponse));\n    cb?.();\n  } catch (err) {\n    yield put(fetchLeadAction.failure(err));\n  }\n}\n\nexport function* createLeadSaga(\n  action: ActionType<typeof createLeadAction.request>\n): Generator {\n  try {\n    const { body, cb } = action.payload;\n    const response = yield call(LeadsInstance.createLead, body);\n    yield put(createLeadAction.success(response as TCreateLeadResponse));\n    cb?.();\n  } catch (err) {\n    yield put(createLeadAction.failure(err));\n  }\n}\n\nexport function* updateLeadSaga(\n  action: ActionType<typeof updateLeadAction.request>\n): Generator {\n  const { id, body, successCb, failedCb } = action.payload;\n  try {\n    yield call(LeadsInstance.updateLead, id, body);\n    successCb?.();\n  } catch (err) {\n    yield put(updateLeadAction.failure(err));\n    failedCb();\n  }\n}\n\nexport function* convertLeadToCustomerSaga(\n  action: ActionType<typeof convertLeadToCustomerAction.request>\n): Generator {\n  const { id, cb } = action.payload;\n  try {\n    const response = yield call(LeadsInstance.convertToCustomer, id);\n    yield put(convertLeadToCustomerAction.success());\n    cb?.(response as TCustomer);\n  } catch (err) {\n    yield put(convertLeadToCustomerAction.failure(err));\n  }\n}\n\nexport function* postLeadAttachmentByIDSaga(\n  action: ActionType<typeof postLeadAttachmentByIDAction.request>\n): Generator {\n  const { id, body, cb } = action.payload;\n  try {\n    const response = yield call(LeadsInstance.postLeadAttachmentByID, id, body);\n    yield put(postLeadAttachmentByIDAction.success(response as TPostLeadAttachmentByIDResponse));\n    cb?.();\n  } catch (err) {\n    yield put(postLeadAttachmentByIDAction.failure(err));\n  }\n}\n\nexport default function* root(): Generator {\n  yield all([\n    takeLatest(fetchLeadsAction.request.type, fetchLeadsSaga),\n    takeLatest(fetchLeadAction.request.type, fetchLeadSaga),\n    takeLatest(createLeadAction.request.type, createLeadSaga),\n    takeLatest(updateLeadAction.request.type, updateLeadSaga),\n    takeLatest(convertLeadToCustomerAction.request.type, convertLeadToCustomerSaga),\n    takeLatest(postLeadAttachmentByIDAction.request.type, postLeadAttachmentByIDSaga),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}