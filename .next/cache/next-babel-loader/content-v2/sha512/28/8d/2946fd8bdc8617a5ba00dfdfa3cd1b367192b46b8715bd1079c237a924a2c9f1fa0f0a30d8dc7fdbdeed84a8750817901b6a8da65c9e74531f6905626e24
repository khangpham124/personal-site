{"ast":null,"code":"import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { fetchProductAction, fetchProductsAction, updateProductAction, createProductAction } from \"../actions/products\";\nimport ProductsInstance from \"services/identity/products\";\nexport function* fetchProductsSaga(action) {\n  try {\n    const {\n      pageIndex,\n      pageSize,\n      optionalParams,\n      cb\n    } = action.payload;\n    const response = yield call(ProductsInstance.fetchProducts, pageIndex, pageSize, optionalParams);\n    yield put(fetchProductsAction.success(response));\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(fetchProductsAction.failure(err));\n  }\n}\nexport function* fetchProductSaga(action) {\n  try {\n    const {\n      id,\n      cb\n    } = action.payload;\n    const response = yield call(ProductsInstance.fetchProduct, id);\n    yield put(fetchProductAction.success(response));\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(fetchProductAction.failure(err));\n  }\n}\nexport function* updateProductSaga(action) {\n  const {\n    id,\n    body,\n    successCb,\n    failedCb\n  } = action.payload;\n\n  try {\n    yield call(ProductsInstance.updateProduct, id, body);\n    successCb === null || successCb === void 0 ? void 0 : successCb();\n  } catch (err) {\n    yield put(updateProductAction.failure(err));\n    failedCb();\n  }\n}\nexport function* createProductSaga(action) {\n  try {\n    const {\n      body,\n      cb\n    } = action.payload;\n    const response = yield call(ProductsInstance.createProduct, body);\n    yield put(createProductAction.success(response));\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(createProductAction.failure(err));\n  }\n}\nexport default function* root() {\n  yield all([takeLatest(fetchProductsAction.request.type, fetchProductsSaga), takeLatest(fetchProductAction.request.type, fetchProductSaga), takeLatest(updateProductAction.request.type, updateProductSaga), takeLatest(createProductAction.request.type, createProductSaga)]);\n}","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/state-management/sagas/products.ts"],"names":["all","call","put","takeLatest","fetchProductAction","fetchProductsAction","updateProductAction","createProductAction","ProductsInstance","fetchProductsSaga","action","pageIndex","pageSize","optionalParams","cb","payload","response","fetchProducts","success","err","failure","fetchProductSaga","id","fetchProduct","updateProductSaga","body","successCb","failedCb","updateProduct","createProductSaga","createProduct","root","request","type"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { ActionType } from \"deox\";\n\nimport { fetchProductAction, fetchProductsAction, updateProductAction, createProductAction } from \"../actions/products\";\nimport ProductsInstance from \"services/identity/products\";\nimport { TFetchProductResponse, TFetchProductsResponse, TCreateProductResponse } from \"services/identity/products/types\";\n\nexport function* fetchProductsSaga(\n  action: ActionType<typeof fetchProductsAction.request>\n): Generator {\n  try {\n    const { pageIndex, pageSize, optionalParams, cb } = action.payload;\n    const response = yield call(ProductsInstance.fetchProducts, pageIndex, pageSize, optionalParams);\n    yield put(fetchProductsAction.success(response as TFetchProductsResponse));\n    cb?.();\n  } catch (err) {\n    yield put(fetchProductsAction.failure(err));\n  }\n}\n\nexport function* fetchProductSaga(\n  action: ActionType<typeof fetchProductAction.request>\n): Generator {\n  try {\n    const { id, cb } = action.payload;\n    const response = yield call(ProductsInstance.fetchProduct, id);\n    yield put(fetchProductAction.success(response as TFetchProductResponse));\n    cb?.();\n  } catch (err) {\n    yield put(fetchProductAction.failure(err));\n  }\n}\n\nexport function* updateProductSaga(\n  action: ActionType<typeof updateProductAction.request>\n): Generator {\n  const { id, body, successCb, failedCb } = action.payload;\n  try {\n    yield call(ProductsInstance.updateProduct, id, body);\n    successCb?.();\n  } catch (err) {\n    yield put(updateProductAction.failure(err));\n    failedCb();\n  }\n}\n\nexport function* createProductSaga(\n  action: ActionType<typeof createProductAction.request>\n): Generator {\n  try {\n    const { body, cb } = action.payload;\n    const response = yield call(ProductsInstance.createProduct, body);\n    yield put(createProductAction.success(response as TCreateProductResponse));\n    cb?.();\n  } catch (err) {\n    yield put(createProductAction.failure(err));\n  }\n}\n\nexport default function* root(): Generator {\n  yield all([\n    takeLatest(fetchProductsAction.request.type, fetchProductsSaga),\n    takeLatest(fetchProductAction.request.type, fetchProductSaga),\n    takeLatest(updateProductAction.request.type, updateProductSaga),\n    takeLatest(createProductAction.request.type, createProductSaga),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}