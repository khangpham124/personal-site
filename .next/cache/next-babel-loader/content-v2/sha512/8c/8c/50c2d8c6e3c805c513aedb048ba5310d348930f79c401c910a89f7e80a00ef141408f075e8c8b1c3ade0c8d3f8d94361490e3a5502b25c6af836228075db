{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createReducer } from 'deox';\nimport { fetchCustomerAction, fetchCustomersAction } from '../actions/customers';\nconst initialState = {\n  data: undefined,\n  customerById: undefined\n};\nconst customersReducer = createReducer(initialState, handleAction => [handleAction(fetchCustomersAction.success, (state, {\n  payload\n}) => _objectSpread(_objectSpread({}, state), {}, {\n  data: payload.customers\n})), handleAction(fetchCustomerAction.success, (state, {\n  payload\n}) => _objectSpread(_objectSpread({}, state), {}, {\n  customerById: payload.customer\n}))]);\nexport default customersReducer;","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/state-management/reducers/customers.ts"],"names":["createReducer","fetchCustomerAction","fetchCustomersAction","initialState","data","undefined","customerById","customersReducer","handleAction","success","state","payload","customers","customer"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAA8B,MAA9B;AAEA,SAASC,mBAAT,EAA8BC,oBAA9B,QAA0D,sBAA1D;AAQA,MAAMC,YAA6B,GAAG;AACpCC,EAAAA,IAAI,EAAEC,SAD8B;AAEpCC,EAAAA,YAAY,EAAED;AAFsB,CAAtC;AAKA,MAAME,gBAAgB,GAAGP,aAAa,CAACG,YAAD,EAAgBK,YAAD,IAAkB,CACrEA,YAAY,CAACN,oBAAoB,CAACO,OAAtB,EAA+B,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,qCACtCD,KADsC;AAEzCN,EAAAA,IAAI,EAAEO,OAAO,CAACC;AAF2B,EAA/B,CADyD,EAKrEJ,YAAY,CAACP,mBAAmB,CAACQ,OAArB,EAA8B,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,qCACrCD,KADqC;AAExCJ,EAAAA,YAAY,EAAEK,OAAO,CAACE;AAFkB,EAA9B,CALyD,CAAjC,CAAtC;AAWA,eAAeN,gBAAf","sourcesContent":["import { createReducer } from 'deox';\n\nimport { fetchCustomerAction, fetchCustomersAction } from '../actions/customers';\nimport { TFetchCustomerResponse, TFetchCustomersResponse } from 'services/identity/customers/types';\n\ntype TCustomersState = {\n  data?: TFetchCustomersResponse;\n  customerById?: TFetchCustomerResponse;\n};\n\nconst initialState: TCustomersState = {\n  data: undefined,\n  customerById: undefined,\n};\n\nconst customersReducer = createReducer(initialState, (handleAction) => [\n  handleAction(fetchCustomersAction.success, (state, { payload }) => ({\n    ...state,\n    data: payload.customers,\n  })),\n  handleAction(fetchCustomerAction.success, (state, { payload }) => ({\n    ...state,\n    customerById: payload.customer,\n  })),\n]);\n\nexport default customersReducer;\n"]},"metadata":{},"sourceType":"module"}