{"ast":null,"code":"import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { fetchAnalyticsLeadsAction, fetchAnalyticsLogcallsAction, fetchAnalyticsCustomersAction, fetchAnalyticsTotalDurationAction, fetchAnalyticsConversionRateAction } from \"../actions/analytics\";\nimport AnalyticsInstance from \"services/identity/analytics\";\nexport function* fetchAnalyticsLeadsSaga(action) {\n  try {\n    const {\n      fromDate,\n      toDate,\n      dimension,\n      entity,\n      question,\n      cb\n    } = action.payload;\n    const response = yield call(AnalyticsInstance.fetchAnalytics, fromDate, toDate, dimension, entity, question);\n    yield put(fetchAnalyticsLeadsAction.success(response));\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(fetchAnalyticsLeadsAction.failure(err));\n  }\n}\nexport function* fetchAnalyticsLogcallsSaga(action) {\n  try {\n    const {\n      fromDate,\n      toDate,\n      dimension,\n      entity,\n      question,\n      cb\n    } = action.payload;\n    const response = yield call(AnalyticsInstance.fetchAnalytics, fromDate, toDate, dimension, entity, question);\n    yield put(fetchAnalyticsLogcallsAction.success(response));\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(fetchAnalyticsLogcallsAction.failure(err));\n  }\n}\nexport function* fetchAnalyticsCustomersSaga(action) {\n  try {\n    const {\n      fromDate,\n      toDate,\n      dimension,\n      entity,\n      question,\n      cb\n    } = action.payload;\n    const response = yield call(AnalyticsInstance.fetchAnalytics, fromDate, toDate, dimension, entity, question);\n    yield put(fetchAnalyticsCustomersAction.success(response));\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(fetchAnalyticsCustomersAction.failure(err));\n  }\n}\nexport function* fetchAnalyticsTotalDurationSaga(action) {\n  try {\n    const {\n      fromDate,\n      toDate,\n      dimension,\n      entity,\n      question,\n      cb\n    } = action.payload;\n    const response = yield call(AnalyticsInstance.fetchAnalytics, fromDate, toDate, dimension, entity, question);\n    yield put(fetchAnalyticsTotalDurationAction.success(response));\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(fetchAnalyticsTotalDurationAction.failure(err));\n  }\n}\nexport function* fetchAnalyticsConversionRateSaga(action) {\n  try {\n    const {\n      fromDate,\n      toDate,\n      dimension,\n      entity,\n      question,\n      cb\n    } = action.payload;\n    const response = yield call(AnalyticsInstance.fetchAnalytics, fromDate, toDate, dimension, entity, question);\n    yield put(fetchAnalyticsConversionRateAction.success(response));\n    cb === null || cb === void 0 ? void 0 : cb();\n  } catch (err) {\n    yield put(fetchAnalyticsConversionRateAction.failure(err));\n  }\n}\nexport default function* root() {\n  yield all([takeLatest(fetchAnalyticsLeadsAction.request.type, fetchAnalyticsLeadsSaga), takeLatest(fetchAnalyticsLogcallsAction.request.type, fetchAnalyticsLogcallsSaga), takeLatest(fetchAnalyticsCustomersAction.request.type, fetchAnalyticsCustomersSaga), takeLatest(fetchAnalyticsTotalDurationAction.request.type, fetchAnalyticsTotalDurationSaga), takeLatest(fetchAnalyticsConversionRateAction.request.type, fetchAnalyticsConversionRateSaga)]);\n}","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/state-management/sagas/analytics.ts"],"names":["all","call","put","takeLatest","fetchAnalyticsLeadsAction","fetchAnalyticsLogcallsAction","fetchAnalyticsCustomersAction","fetchAnalyticsTotalDurationAction","fetchAnalyticsConversionRateAction","AnalyticsInstance","fetchAnalyticsLeadsSaga","action","fromDate","toDate","dimension","entity","question","cb","payload","response","fetchAnalytics","success","err","failure","fetchAnalyticsLogcallsSaga","fetchAnalyticsCustomersSaga","fetchAnalyticsTotalDurationSaga","fetchAnalyticsConversionRateSaga","root","request","type"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { ActionType } from \"deox\";\nimport {\n  fetchAnalyticsLeadsAction,\n  fetchAnalyticsLogcallsAction,\n  fetchAnalyticsCustomersAction,\n  fetchAnalyticsTotalDurationAction,\n  fetchAnalyticsConversionRateAction,\n} from \"../actions/analytics\";\nimport AnalyticsInstance from \"services/identity/analytics\";\nimport {\n  TAnalyticsResponse,\n  TConversionRateResponse,\n} from \"services/identity/analytics/types\";\n\nexport function* fetchAnalyticsLeadsSaga(\n  action: ActionType<typeof fetchAnalyticsLeadsAction.request>\n): Generator {\n  try {\n    const { fromDate, toDate, dimension, entity, question, cb } =\n      action.payload;\n    const response = yield call(\n      AnalyticsInstance.fetchAnalytics,\n      fromDate,\n      toDate,\n      dimension,\n      entity,\n      question\n    );\n    yield put(\n      fetchAnalyticsLeadsAction.success(response as TAnalyticsResponse)\n    );\n    cb?.();\n  } catch (err) {\n    yield put(fetchAnalyticsLeadsAction.failure(err));\n  }\n}\n\nexport function* fetchAnalyticsLogcallsSaga(\n  action: ActionType<typeof fetchAnalyticsLogcallsAction.request>\n): Generator {\n  try {\n    const { fromDate, toDate, dimension, entity, question, cb } =\n      action.payload;\n    const response = yield call(\n      AnalyticsInstance.fetchAnalytics,\n      fromDate,\n      toDate,\n      dimension,\n      entity,\n      question\n    );\n    yield put(\n      fetchAnalyticsLogcallsAction.success(response as TAnalyticsResponse)\n    );\n    cb?.();\n  } catch (err) {\n    yield put(fetchAnalyticsLogcallsAction.failure(err));\n  }\n}\n\nexport function* fetchAnalyticsCustomersSaga(\n  action: ActionType<typeof fetchAnalyticsCustomersAction.request>\n): Generator {\n  try {\n    const { fromDate, toDate, dimension, entity, question, cb } =\n      action.payload;\n    const response = yield call(\n      AnalyticsInstance.fetchAnalytics,\n      fromDate,\n      toDate,\n      dimension,\n      entity,\n      question\n    );\n    yield put(\n      fetchAnalyticsCustomersAction.success(response as TAnalyticsResponse)\n    );\n    cb?.();\n  } catch (err) {\n    yield put(fetchAnalyticsCustomersAction.failure(err));\n  }\n}\n\nexport function* fetchAnalyticsTotalDurationSaga(\n  action: ActionType<typeof fetchAnalyticsTotalDurationAction.request>\n): Generator {\n  try {\n    const { fromDate, toDate, dimension, entity, question, cb } =\n      action.payload;\n    const response = yield call(\n      AnalyticsInstance.fetchAnalytics,\n      fromDate,\n      toDate,\n      dimension,\n      entity,\n      question\n    );\n    yield put(\n      fetchAnalyticsTotalDurationAction.success(response as TAnalyticsResponse)\n    );\n    cb?.();\n  } catch (err) {\n    yield put(fetchAnalyticsTotalDurationAction.failure(err));\n  }\n}\n\nexport function* fetchAnalyticsConversionRateSaga(\n  action: ActionType<typeof fetchAnalyticsConversionRateAction.request>\n): Generator {\n  try {\n    const { fromDate, toDate, dimension, entity, question, cb } =\n      action.payload;\n    const response = yield call(\n      AnalyticsInstance.fetchAnalytics,\n      fromDate,\n      toDate,\n      dimension,\n      entity,\n      question\n    );\n    yield put(\n      fetchAnalyticsConversionRateAction.success(\n        response as TConversionRateResponse\n      )\n    );\n    cb?.();\n  } catch (err) {\n    yield put(fetchAnalyticsConversionRateAction.failure(err));\n  }\n}\n\nexport default function* root(): Generator {\n  yield all([\n    takeLatest(fetchAnalyticsLeadsAction.request.type, fetchAnalyticsLeadsSaga),\n    takeLatest(\n      fetchAnalyticsLogcallsAction.request.type,\n      fetchAnalyticsLogcallsSaga\n    ),\n    takeLatest(\n      fetchAnalyticsCustomersAction.request.type,\n      fetchAnalyticsCustomersSaga\n    ),\n    takeLatest(\n      fetchAnalyticsTotalDurationAction.request.type,\n      fetchAnalyticsTotalDurationSaga\n    ),\n    takeLatest(\n      fetchAnalyticsConversionRateAction.request.type,\n      fetchAnalyticsConversionRateSaga\n    ),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}