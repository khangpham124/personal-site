{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createReducer } from \"deox\";\nimport { fetchCommentsByIdAction } from \"../actions/comments\";\nconst initialState = {\n  fetchCommentsByIdResponse: undefined\n};\nconst commentssReducer = createReducer(initialState, handleAction => [handleAction(fetchCommentsByIdAction.success, (state, {\n  payload\n}) => _objectSpread(_objectSpread({}, state), {}, {\n  fetchCommentsByIdResponse: payload.comments\n}))]);\nexport default commentssReducer;","map":{"version":3,"sources":["/Users/admin/Documents/personal-site/src/state-management/reducers/comments.ts"],"names":["createReducer","fetchCommentsByIdAction","initialState","fetchCommentsByIdResponse","undefined","commentssReducer","handleAction","success","state","payload","comments"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAA8B,MAA9B;AAEA,SAASC,uBAAT,QAAwC,qBAAxC;AAOA,MAAMC,YAA4B,GAAG;AACnCC,EAAAA,yBAAyB,EAAEC;AADQ,CAArC;AAIA,MAAMC,gBAAgB,GAAGL,aAAa,CAACE,YAAD,EAAgBI,YAAD,IAAkB,CACrEA,YAAY,CAACL,uBAAuB,CAACM,OAAzB,EAAkC,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,qCACzCD,KADyC;AAE5CL,EAAAA,yBAAyB,EAAEM,OAAO,CAACC;AAFS,EAAlC,CADyD,CAAjC,CAAtC;AAOA,eAAeL,gBAAf","sourcesContent":["import { createReducer } from \"deox\";\n\nimport { fetchCommentsByIdAction } from \"../actions/comments\";\nimport { TFetchCommentsByIdResponse } from \"services/identity/comments/types\";\n\ntype TCommentsState = {\n  fetchCommentsByIdResponse?: TFetchCommentsByIdResponse;\n};\n\nconst initialState: TCommentsState = {\n  fetchCommentsByIdResponse: undefined,\n};\n\nconst commentssReducer = createReducer(initialState, (handleAction) => [\n  handleAction(fetchCommentsByIdAction.success, (state, { payload }) => ({\n    ...state,\n    fetchCommentsByIdResponse: payload.comments,\n  })),\n]);\n\nexport default commentssReducer;\n"]},"metadata":{},"sourceType":"module"}